FORMAT: X-1A

HOST: https://secure.gooddata.com

#GoodData API Documentation
The GoodData API is based on REST principles, all you need to use it is your GoodData account. You must be authenticated and call HTTPs requests on the URLs listed below. 
This documentation covers the core resources you can used to manipulate objects on the GoodData Platform. Review the information basic instructions if you are new to APIs.

>**Note:** We strongly discourage GoodData customers from using the apiary Traffic Inspector. Any information you submit through Traffic Inspector is routed through a 3rd party, and is unsecured. If you choose to use Traffic Inspector against our recommendation, use your GoodData TESTING credentials for API calls. _Never_ use your production credentials.

##Allowed HTTPs requests:

- `POST` - Creates or updates a resource
- `PUT` - Updates a resource
- `GET` - Retrieves a resource or list of resources
- `DELETE` - Delete a resource

##Typical Server Responses

- 200 `OK` - The request was successful (some API calls may return 201 instead).
- 201 `Created` - The request was successful and a resource was created.
- 204 `No Content` - The request was successful but there is no representation to return (that is, the response is empty).
- 400 `Bad Request` - The request could not be understood or was missing required parameters.
- 401 `Unauthorized` - Authentication failed or user does not have permissions for the requested operation.
- 403 `Forbidden` - Access denied.
- 404 `Not Found` - Resource was not found.
- 405 `Method Not Allowed` - Requested method is not supported for the specified resource.
- 429 `Too Many Requests` - Exceeded GoodData API limits. Pause requests, wait one minute, and try again. 
- 503 `Service Unavailable` - The service is temporary unavailable (e.g. scheduled Platform Maintenance). Try again later.


# Group Platform Availability 
<a id="platformavailability" ></a>

If The GoodData Platform is in scheduled maintenance, REST API Returns a **503** error code and following message is displayed in the response body:


`Scheduled maintenance in progress. Please try again later.`

Otherwise it will return 503 with a descriptive error message. Specific errors messages are listed with individual APIs. You can use **gdc/ping** resource to check the Platform availability.


## /gdc/ping
### GET
Checks Platform availability.

+ Request

    + Headers

            Accept: application/json


+ Response 204

+ Response 503

    + Body 
    
            Scheduled maintenance in progress. Please try again later.  
    
+ Response 503

    + Headers
    
            Content-Type: application/json
        
    + Body 
    
            {"error":{
                "message": "Internal server error. Please fill in bug report with request_id='{error-id}'"
            }}


# Group Log In 
<a id="login" ></a>

GoodData authentication uses two kinds of tokens to track user sessions: 

- A long-lived **SST token**, which you obtain when you call `/gdc/account/login` 
- A short-lived **TT token**, which you obtain when you call `gdc/account/token` using your **SST Token**. This token is encrypted, and is quickly verified by the resource servers.

**Steps:**

1. `POST` your credentials to the login resource. The SST token is returned in the SetCookie header.
2. `GET` the token resource, and include the SST token in your header. The TT token is returned in the SetCookie header.  
  You are now authenticated. Include this TT token in a -cookie header on all API calls.

>**Note:** The TT token has limited validity. If you received a 401 Unauthorized Response, GET a new TT token.

#### Additional Information

You can use two methods to obtain and use tokens: _HTTP Cookies_ and _custom headers_. These methods are controlled by `verify_level` property when you log in.  The advantage of using Cookies is that most client libraries are able to use them automatically without a need to write custom code (store and send them with the followup API requests based on the URI path). 

* Do not specify a _verify_level_ if you intend to rely on cookie usage. You cannot use this method across domains, and therefore not in the data staging area.
* Specify a _verify_level_ of 2 if your client uploads data. You will get the token values after you log in and token resources and you'll need to set the X-GDC-AuthSST and X-GDC-AuthTT headers to appropriate token values whenever they are required.

## /gdc/account/login
### POST
Log in.

+ Parameters
    + login (required, string) ... GoodData login email address
    + password (required, string) ... GoodData password
    + remember (required, boolean) ... Specifies whether to remember login credentials.
    + verify_level (optional, integer, ``) ... Verification level of the token. Specify '0' for HTTP cookies; specify '2' for custom HTTP headers

+ Request (application/json)
    + Headers

            Accept: application/json

    + Body

            {
                "postUserLogin":{
                    "login":"user@company.com",
                    "password":"YourPassword",
                    "remember":1
                }
            }

+ Response 200 (application/json)
    + Headers

            Set-Cookie: GDCAuthTT=; path=/gdc; expires=Mon, 30-Jul-2012 09:12:42 GMT; secure; HttpOnly, GDCAuthSST={super-secured-token}; path=/gdc/account; secure; HttpOnly

    + Body

            {
                "userLogin":{
                    "profile":"/gdc/account/profile/{user-id}",
                    "state":"/gdc/account/login/{user-id}"
                }
            }

## /gdc/account/token
### GET
Request a TT token.

+ Request 
    + Headers

            Accept: application/json
            Cookie: Set-Cookie: GDCAuthTT=; path=/gdc; expires=Mon, 30-Jul-2012 09:12:42 GMT; secure; HttpOnly, GDCAuthSST={super-secured-token}; path=/gdc/account; secure; HttpOnly

+ Response 200 
    + Headers

            Set-Cookie: set-cookie: GDCAuthTT={temporary-token}; path=/gdc; expires=Mon, 30-Jul-2012 09:12:42 GMT; secure; HttpOnly, GDCAuthSST={super-secured-token}; path=/gdc/account; secure; HttpOnly


## /gdc/account/profile/{user-id}
### GET
Retrieves details of your user account, including email addresses, phone number, and authentication provider. This information is also returned after successful authentication. 

+ Request 
    + Headers

            Accept: application/json

+ Response 200 

    + Body
    
              {
                 "accountSetting" : {
                   "country" : "cz",
                   "firstName" : "Name",
                   "ssoProvider" : null,
                   "timezone" : null,
                   "position" : "",
                   "authenticationModes" : [],
                   "companyName" : "GoodData",
                   "login" : "email@gooddata.com",
                   "email" : "email@gooddata.com",
                   "created" : "2011-08-10 08:37:46",
                   "updated" : "2014-04-11 01:18:07",
                   "lastName" : "Lastname",
                   "phoneNumber" : "7755441225",
                    "links" : {
                        "self" : "/gdc/account/profile/{profile-id}",
                        "projects" : "/gdc/account/profile/{profile-id}/projects"
                              }
                        }
                }
                

## /gdc/account/login/{user-id}
### DELETE
Log out.

+ Request 
    + Headers

            Accept: application/json

+ Response 200 



# Group Objects 
<a id="objects" ></a>


Objects are the entities in the GoodData Platform. For example, Dashboards, Reports, Metrics, and Data Permissions are objects. 

## Object Creation [/gdc/md/{project-id}/obj{?createAndGet=true}]
### Create a New Object [POST]
Create a new object. The example below creates a new metric. 
>**Note:** This example does not include the `createAndGet` parameter. 

<!---
+ Parameters
    + title (required, string) ... Name of the new object
    + summary (optional, string) ... Object description
    + tags (optional, boolean) ... Tags to associate with the object. Separate tags with a space.
    + deprecated (optional, integer, ``) ... Verification level of the token. Specify '0' for HTTP cookies; specify '2' for custom HTTP headers
    + unlisted (boolean,
    + expression ( ) specifies the MAQL for the object. 
    +format (???, ??? ) Specifies the format that metrics are calculated in. Do not use 
    +folders (???, ???? ) The folder to include the object in.
    -->



+ Request
    + Headers

            Content-Type: application/json
            Accept: application/json

    + Body

            {
                "metric": {
                    "meta": {
                        "title": "My new metric",
                        "summary": "",
                        "tags": "",
                        "deprecated": 0,
                        "unlisted": 1
                    },
                    "content": {
                        "expression": "SELECT SUM([/gdc/md/{project-id}/obj/{object-id}])",
                        "format": "#,##0.00",
                        "folders": []
                    }
                }
            }

+ Response 200
    + Headers

            Content-Type: application/json

    + Body

            {
                "uri": "/gdc/md/{project-id}/obj/{object-id}"
            }
            
### Create and Retrieve a New Object [POST]
Use this call to create new object. In this example you create a new metric and receive the complete object instead of link to it.

**With the createAndGet=true parameter.**

+ Request
    + Headers

            Content-Type: application/json
            Accept: application/json

    + Body

            {
                "metric": {
                    "meta": {
                        "title": "My new metric",
                        "summary": "",
                        "tags": "",
                        "deprecated": 0,
                        "unlisted": 1
                    },
                    "content": {
                        "expression": "SELECT SUM([/gdc/md/{project-id}/obj/{object-id}])",
                        "format": "#,##0.00",
                        "folders": []
                    }
                }
            }

+ Response 200
    + Headers

            Content-Type: application/json

    + Body

            {
                "metric": {
                    "content": {
                        "format": "#,##0.00",
                        "tree": {
                            "content": [
                                {
                                    "content": [
                                        {
                                            "value": "SUM",
                                            "content": [
                                                {
                                                    "value": "/gdc/md/{project-id}/obj/{object-id}",
                                                    "position": {
                                                        "column": 12,
                                                        "line": 2
                                                    },
                                                    "type": "fact object"
                                                }
                                            ],
                                            "position": {
                                                "column": 8,
                                                "line": 2
                                            },
                                            "type": "function"
                                        }
                                    ],
                                    "position": {
                                        "column": 8,
                                        "line": 2
                                    },
                                    "type": "expression"
                                }
                            ],
                            "position": {
                                "column": 1,
                                "line": 2
                            },
                            "type": "metric"
                        },
                        "expression": "SELECT SUM([/gdc/md/{project-id}/obj/{object-id}])"
                    },
                    "meta": {
                        "author": "/gdc/account/profile/{user-id}",
                        "uri": "/gdc/md/{project-id}/obj/{object-id}",
                        "tags": "",
                        "created": "2014-07-07 10:02:54",
                        "identifier": "arFtGnK2gysS",
                        "deprecated": "0",
                        "summary": "",
                        "unlisted": 1,
                        "title": "My new metric",
                        "category": "metric",
                        "updated": "2014-07-07 10:02:54",
                        "contributor": "/gdc/account/profile/{user-id}"
                    }
                }
            }
          
## Existing Object Manipulation [/gdc/md/{project-id}/obj/{object-id}]
### Retrieve an Object [GET]
Use this call to retrieve an object from the API.

+ Request
    + Headers

            Accept: application/json

    + Body

+ Response 200
    + Headers

            Content-Type: application/json

    + Body

            {
                "metric": {
                    "content": {
                        "format": "#,##0.00",
                        "tree": {
                            "content": [
                                {
                                    "content": [
                                        {
                                            "value": "SUM",
                                            "content": [
                                                {
                                                    "value": "/gdc/md/{project-id}/obj/{object-id}",
                                                    "position": {
                                                        "column": 12,
                                                        "line": 2
                                                    },
                                                    "type": "fact object"
                                                }
                                            ],
                                            "position": {
                                                "column": 8,
                                                "line": 2
                                            },
                                            "type": "function"
                                        }
                                    ],
                                    "position": {
                                        "column": 8,
                                        "line": 2
                                    },
                                    "type": "expression"
                                }
                            ],
                            "position": {
                                "column": 1,
                                "line": 2
                            },
                            "type": "metric"
                        },
                        "expression": "SELECT SUM([/gdc/md/{project-id}/obj/{object-id}])"
                    },
                    "meta": {
                        "author": "/gdc/account/profile/{user-id}",
                        "uri": "/gdc/md/{project-id}/obj/{object-id}",
                        "tags": "",
                        "created": "2014-07-07 09:50:49",
                        "identifier": "adZtDDfkfAHG",
                        "deprecated": "0",
                        "summary": "",
                        "unlisted": 1,
                        "title": "My new metric",
                        "category": "metric",
                        "updated": "2014-07-07 09:50:49",
                        "contributor": "/gdc/account/profile/{user-id}"
                    }
                }
            }
            
### Update an Object [PUT]
Use this call to update existing object. Use the full object body/content with your changes. See the example where we've changed the Metric definition (`SUM` -> `AVG`)

+ Request
    + Headers

            Content-Type: application/json
            Accept: application/json

    + Body
    
            {
                "metric": {
                    "content": {
                        "format": "#,##0.00",
                        "tree": {
                            "content": [
                                {
                                    "content": [
                                        {
                                            "value": "SUM",
                                            "content": [
                                                {
                                                    "value": "/gdc/md/{project-id}/obj/{object-id}",
                                                    "position": {
                                                        "column": 12,
                                                        "line": 2
                                                    },
                                                    "type": "fact object"
                                                }
                                            ],
                                            "position": {
                                                "column": 8,
                                                "line": 2
                                            },
                                            "type": "function"
                                        }
                                    ],
                                    "position": {
                                        "column": 8,
                                        "line": 2
                                    },
                                    "type": "expression"
                                }
                            ],
                            "position": {
                                "column": 1,
                                "line": 2
                            },
                            "type": "metric"
                        },
                        "expression": "SELECT AVG([/gdc/md/{project-id}/obj/{object-id}])"
                    },
                    "meta": {
                        "author": "/gdc/account/profile/{user-id}",
                        "uri": "/gdc/md/{project-id}/obj/{object-id}",
                        "tags": "",
                        "created": "2014-07-07 09:50:49",
                        "identifier": "adZtDDfkfAHG",
                        "deprecated": "0",
                        "summary": "",
                        "unlisted": 1,
                        "title": "My new metric",
                        "category": "metric",
                        "updated": "2014-07-07 09:50:49",
                        "contributor": "/gdc/account/profile/{user-id}"
                    }
                }
            }

+ Response 200
    + Headers

            Content-Type: application/json

    + Body

            {
                "uri": "/gdc/md/{project-id}/obj/{object-id}"
            }

### Delete an Object [DELETE]
Use this resource to delete specific objects.

+ Request
    + Headers

            Content-Type: application/json
            Accept: application/json

    + Body
    
    
+ Response 204
    + Headers

    + Body



# Group Project
<a id="project" ></a>

Projects are one of the key objects in the GoodData platform. When working with GoodData, you basically create projects (datamarts). Metrics, Reports and Dashboards
are then created inside Projects. The following two states are key for you and your integrations:

- **ENABLED** - project is ready and available
- **DELETED** - something is wrong

Once you create a Project with a `POST` request shown below, [poll the returned url](#get-%2Fgdc%2Fprojects%2F%7Bproject-id%7D) and check the Project `state` value until it is **ENABLED** or **DELETED**. Find out more information about how to create a [project programatically on this discussion thread](http://stackoverflow.com/questions/22647479/gooddata-how-to-create-a-project-through-api). Other states that project can be in:

- PREPARING 
- LOADING
- PREPARED
- DISABLED
- ARCHIVED

###Project Properties  
- title (string) :   Project Title         
- summary (string) : Project summary
- roles (uri) : User's role in the Project
- userPermissions (uri) : User permissions information
- userRoles (uri) : User roles information
- users (uri) : Project users information
- created (date) : Date of project creation
- updated (date) : Date of project update 
- author (uri) : Project creator account
- exportUsers (boolean) : export users from project true/false 
- exportData (boolean) : export data from project true/false
- token (string) : export Token for export/import project usage

## /gdc/projects
### POST
To create new project, use following call. Poll the resource that you received as response until it gives you the status: **ENABLED** or **DELETED** 
See the next API call for more details. 
>**NOTE:** You can create a maximum of 100 projects per token every 24 hours (floating time period). If you need to exceed this limit, contact [GoodData Support](https://support.gooddata.com/home).

+ Request (application/json)
    + Headers

            Accept: application/json

    + Body

            { "project" : {
                   "content" : { "guidedNavigation": 1, "driver" : "Pg", "authorizationToken" : "AUTH_TOKEN"},
                   "meta" : {
                   "title" : "Test Project",
                   "summary" : "Testing Project",
                   "projectTemplate" : "/projectTemplates/{template-name}/{template-version}"
                   } }
            }

+ Response 200 (application/json)

        {
           "uri" : "/gdc/projects/{project_id}"
        }


+ Response 429 (application/json)

## /gdc/projects/{project-id}
### GET
To show the Project information after creation or whenever you need it. While creating a new project, poll this resource until the `state` is **ENABLED** or **DELETED**.

+ Request 
    + Headers

            Accept: application/json

+ Response 200 (application/json)

        {
           "project" : {
              "content" : {
                 "guidedNavigation" : "1",
                 "isPublic" : "0",
                 "state" : "ENABLED"
              },
              "links" : {
                 "roles" : "/gdc/projects/{project-id}/roles",
                 "ldm_thumbnail" : "/gdc/projects/{project-id}/ldm?thumbnail=1",
                 "connectors" : "/gdc/projects/{project-id}/connectors",
                 "self" : "/gdc/projects/{project-id}",
                 "invitations" : "/gdc/projects/{project-id}/invitations",
                 "users" : "/gdc/projects/{project-id}/users",
                 "ldm" : "/gdc/projects/{project-id}/ldm",
                 "publicartifacts" : "/gdc/projects/{project-id}/publicartifacts",
                 "metadata" : "/gdc/md/{project-id}",
                 "templates" : "/gdc/md/{project-id}/templates"
              },
              "meta" : {
                 "created" : "2012-05-01 23:56:01",
                 "summary" : "Project Summary",
                 "updated" : "2012-05-01 23:56:01",
                 "author" : "/gdc/account/profile/{user-id}",
                 "title" : "Project Name",
                 "contributor" : "/gdc/account/profile/{user-id}"
              }
           }
        }

### DELETE
This API call will DELETE your defined project. Only Project ADMIN can do this action.

+ Request 
    + Headers

            Accept: application/json

+ Response 200 (application/json)

        {}

## /gdc/account/profile/{user-id}/projects
### GET
To list all existing projects

+ Request 
    + Headers

            Accept: application/json

+ Response 200 (application/json)

        {
           "projects" : [
              {
                 "project" : {
                    "content" : {
                       "guidedNavigation" : "1",
                       "isPublic" : "0",
                       "state" : "ENABLED"
                    },
                    "links" : {
                       "roles" : "/gdc/projects/{project-id}/roles",
                       "ldm_thumbnail" : "/gdc/projects/{project-id}/ldm?thumbnail=1",
                       "userPermissions" : "/gdc/projects/{project-id}/users/{user-id}/permissions",
                       "userRoles" : "/gdc/projects/{project-id}/users/{user-id}/roles",
                       "connectors" : "/gdc/projects/{project-id}/connectors",
                       "self" : "/gdc/projects/{project-id}",
                       "invitations" : "/gdc/projects/{project-id}/invitations",
                       "users" : "/gdc/projects/{project-id}/users",
                       "ldm" : "/gdc/projects/{project-id}/ldm",
                       "metadata" : "/gdc/md/{project-id}",
                       "publicartifacts" : "/gdc/projects/{project-id}/publicartifacts",
                       "templates" : "/gdc/md/{project-id}/templates"
                    },
                    "meta" : {
                       "created" : "YYYY-MM-DD HH:MM:SS",
                       "summary" : "Project Summary",
                       "updated" : "YYYY-MM-DD HH:MM:SS",
                       "author" : "/gdc/account/profile/{user-id}",
                       "title" : "Project Name",
                       "contributor" : "/gdc/account/profile/{user-id}"
                    }
                 }
              } ]
        }

## Export a complete project [/gdc/md/{project_id}/maintenance/export]

+ Parameters
  + project_id (required,string)...The ID of the project you want to export.

### Export a complete project [POST]

* `exportUsers` (required, boolean) - Specifies whether to include users in the export.  
**Default:** 1
* `exportData ` (required, boolean) - Specifies whether to include project data in the export.  
**Default:** 1
* `authorizedUsers` (optional, string) - Comma-separated list of email addresses of users authorized to import the project. Surround email addresses with double quotes.
* `excludeSchedule` (optional, boolean) - Specifies whether to include scheduled Emails in the export. All schedules you import to a project are enabled, even if they were disabled when exported.  
**Default:** 0

**Response** 
* `status` (uri) - URI where you can poll for the status of the export.
* `token` (string) - Token to use to import the exported metadata.

+ Request (application/json)
    + Headers

            Accept: application/json

    + Body

            { "exportProject" : {
                 "exportUsers" : "1 | 0",
                 "exportData" : "1 | 0",
                 "excludeSchedules" "1 | 0"
              }
            }

+ Response 200 (application/json)

        {
           "exportArtifact" : {
              "status" : {
                 "uri" : "/gdc/md/{project_id}/etltask/{task_id}"
              },
              "token" : "EXPORT_TOKEN"
           }
        }

### Import a complete project [/gdc/md/{project_id}/maintenance/import]

+ Parameters
  + project_id (required,string)...The ID of the project where you want to import the project token.

#### Import a complete project [POST]

* `token` (required, string) - Token to use to import the exported metadata. This token is created during export.

**NOTE:** All schedules you import to a project are enabled, even if they were disabled when exported.

**Default:** 0

+ Request (application/json)
    + Headers

            Accept: application/json

    + Body

            { 
            "importProject" : {
              "token" : "TOKEN_STRING",
              }
            }

+ Response 200 (application/json)

        {
        "uri" : "/gdc/md/{project_id}/etltask/{task_id}"
        }


## /gdc/projects/{project-id}/styleSettings
### PUT
To create your own custom colour palette in given Project

+ Request (application/json)
    + Headers

            Accept: application/json

    + Body

            {"styleSettings" :
               {"chartPalette": [ 
                  { "guid": "guid1", "fill": { "r":255, "g":255, "b":0 } }, 
                  { "guid": "guid2", "fill": { "r":255, "g":255, "b":40 } }, 
                  { "guid": "guid3", "fill": { "r":255, "g":255, "b":80 } }, 
                  { "guid": "guid4", "fill": { "r":255, "g":255, "b":120 } }, 
                  { "guid": "guid5", "fill": { "r":255, "g":255, "b":180 } }, 
                  { "guid": "guid6", "fill": { "r":255, "g":255, "b":200 } } 
                  ]
               }
            }

+ Response 204 

### GET
To GET your current color palette

+ Request
    + Headers

            Accept: application/json

+ Response 200 (application/json)

        {"styleSettings" :
           {"chartPalette": [ 
              { "guid": "guid1", "fill": { "r":255, "g":255, "b":0 } }, 
              { "guid": "guid2", "fill": { "r":255, "g":255, "b":40 } }, 
              { "guid": "guid3", "fill": { "r":255, "g":255, "b":80 } }, 
              { "guid": "guid4", "fill": { "r":255, "g":255, "b":120 } }, 
              { "guid": "guid5", "fill": { "r":255, "g":255, "b":180 } }, 
              { "guid": "guid6", "fill": { "r":255, "g":255, "b":200 } } 
              ]
           }
        }

### DELETE
To Delete/Reset your own custom colour palette in given Project

+ Request
    + Headers

            Accept: application/json

+ Response 204

## /gdc/projects/{project-id}/roles
### GET
To GET User roles for given project. Use following API call. There are 6 default roles (id 1-5), but these IDs are not fixed for specific user roles. You have to GET role details (following API call below) to set User roles correctly.

+ Request
    + Headers

            Accept: application/json

+ Response 200 (application/json)

        {
            "projectRoles": {
                "roles": [
                    "/gdc/projects/{project-id}/roles/{role-id}",
                    "/gdc/projects/{project-id}/roles/{role-id}"
                ],
                "links": {
                    "project": "/gdc/projects/{project-id}/"
                }
            }
        }

## /gdc/projects/{project-id}/roles/{role-id}
### GET
To GET details about specific project role, use this API call.

+ Request
    + Headers

            Accept: application/json

+ Response 200

        {
            "projectRole": {
                "permissions": {
                    "canAccessIntegration": "0",
                    "canCreateProjectDashboard": "0",
                    "canManageComment": "0",
                    "canCreateDimensionMapping": "0",
                    "canInitData": "0",
                    "canManageIntegration": "0",
                    "canManageFolder": "0",
                    "canInviteUserToProject": "0",
                    "canCreateDomain": "0",
                    "canCreateTableDataLoad": "0",
                    "canSeeOtherUserDetails": "0",
                    "canCreateETLInterface": "0",
                    "canCreateRole": "0",
                    "canCreateReportResult": "1",
                    "canCreateHelp": "0",
                    "canManageDomain": "0",
                    "canManageAttributeLabel": "0",
                    "canCreateColumn": "0",
                    "canManageReport": "0",
                    "canManageDataSet": "0",
                    "canSetUserVariables": "0",
                    "canCreateAttributeGroup": "0",
                    "canValidateProject": "0",
                    "canMaintainProject": "0",
                    "canCreateETLFile": "0",
                    "canCreateScheduledMail": "0",
                    "canManageETLSession": "0",
                    "canSuspendUserFromProject": "0",
                    "canMaintainUserFilterRelation": "0",
                    "canManageAttribute": "0",
                    "canManageReportDefinition": "0",
                    "canCreateReportResult2": "1",
                    "canMaintainUserFilter": "0",
                    "canCreateReport": "0",
                    "canManageETLFile": "0",
                    "canCreateComment": "0",
                    "canCreateDataSet": "0",
                    "canCreateTable": "0",
                    "canManageTableDataLoad": "0",
                    "canManageDimensionMapping": "0",
                    "canCreateMetric": "0",
                    "canRefreshData": "0",
                    "canManageProjectDashboard": "0",
                    "canManageProject": "0",
                    "canManagePrompt": "0",
                    "canManageETLInterface": "0",
                    "canManageReportResult2": "0",
                    "canAccessWorkbench": "0",
                    "canCreateAttributeLabel": "0",
                    "canManageColumn": "0",
                    "canCreatePrompt": "0",
                    "canManagePublicAccessCode": "0",
                    "canListUsersInProject": "0",
                    "canManageAttributeGroup": "0",
                    "canManageMetric": "0",
                    "canManageHelp": "0",
                    "canManageTable": "0",
                    "canSetProjectVariables": "0",
                    "canCreateETLSession": "0",
                    "canCreateFolder": "0",
                    "canManageFact": "0",
                    "canListInvitationsInProject": "0",
                    "canManageScheduledMail": "0",
                    "canManageReportResult": "1",
                    "canManageAnnotation": "0",
                    "canSeePublicAccessCode": "0",
                    "canCreateReportDefinition": "1",
                    "canCreateFact": "0",
                    "canCreateAttribute": "0",
                    "canAssignUserWithRole": "0",
                    "canCreateAnnotation": "0"
                },
                "links": {
                    "roleUsers": "/gdc/projects/{project-id}/roles/{role-id}/users"
                },
                "meta": {
                    "created": "2012-07-25 11:28:52",
                    "identifier": "dashboardOnlyRole",
                    "summary": "dashboard only",
                    "author": "/gdc/account/profile/{user-id}",
                    "updated": "2012-07-25 11:28:52",
                    "title": "Embedded Dashboard Only",
                    "contributor": "/gdc/account/profile/{user-id}"
                }
            }
        }
        

## /gdc/md/{project-id}/service/timezone
### POST
To change the Project timezone. Find more information [in the article](https://developer.gooddata.com/article/setting-a-custom-time-zone-for-your-project). Use [Olson DB timezone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) identifiers.

+ Request (application/json)
    + Headers

            Accept: application/json

    + Body

            {
             "service": {
                "timezone": "UTC"
                        }
            }

+ Response 200

    + Headers
    
            Content-Type: application/json
            
    + Body
    
            {
             "service": {
                "timezone": "UTC"
                        }
            }
            

# Group User
<a id="user" ></a>
To manage users via the User Provisioning API Resources, you need to have your own domain. If you have it, you can simply use the requests below.

###User Properties  
- login (string) : User login         
- password (string) : User password
- verifyPassword (string) : Password for verification
- email : User's email for invitations, used as contact email
- firstname (string) : User's firstname
- lastname (string) : User's lastname
- userRoles (uri) : Uri to the specific user roles
- projectUsersUpdateResult : Give an array of successful/failed created users
- companyName (string) : Name of user's company
- country (string) : User's country
- created (date) : Date of user creation
- updated (date) : Date of user properties update
- phoneNumber : User's phonenumber
- position (string) : User's position in a company
- authenticationModes (array of strings) : an optional field specifying authentication modes (SSO, PASSWORD) allowed for this user. The value of this field overrides the global settings for the domain.

## /gdc/account/domains/{organization-name}/users
### POST
To create new user in your domain - use this resource. The API will give you new user's uri. You have to be ORGANIZATION admin for provision the user to the Project.

+ Request
    + Headers

            Accept: application/json

    + Body

            {
             "accountSetting":{
                "login": "user@login.com",
                "password":"PASSWORD",
                "email":"contact@email.com",
                "verifyPassword":" PASSWORD ",
                "firstName":"FirstName",
                "lastName":"LastName",
                "ssoProvider":"SSO-PROVIDER"
             }
            }

+ Response 200

        {
        "uri" : "/gdc/account/profile/{profile-id}"
        }

### GET
Lists all users in a domain

+ Request
    + Headers

            Accept: application/json

+ Response 200

        {
            "accountSettings": {
                "paging": {
                    "offset": 0,
                    "count": 14
                },
                "items": [
                    {
                        "accountSetting": {
                            "companyName": "Company",
                            "country": "cz",
                            "created": "2011-08-10 08:37:46",
                            "firstName": "John",
                            "lastName": "Doe",
                            "login": "user.name@company.com",
                            "ssoProvider":"SSO-PROVIDER",
                            "phoneNumber": "+420724722926",
                            "position": "",
                            "settings": "{\"_VERSION\":\"1.1\",\"currentProjectUri\":\"/gdc/projects/{project-id}\",\"/gdc/projects/{project-id}\":{\"dashboard\":[\"/gdc/md/{project-id}/obj/{obj-id}\",\"abcdef\"]},\"releaseNotice\":[\"stable_67\"],\"/gdc/projects/{project-id}\":{\"dashboard\":[\"/gdc/md/{project-id}/obj/{obj-id}\",\"ghchijk\"]},\"hint-projectPage-invite-people\":false,\"/gdc/projects/{project-id}\":{\"dashboard\":[\"/gdc/md/{project-id}/obj/{obj-id}\",\"lmnopq\"]}}",
                            "timezone": null,
                            "updated": "2012-02-20 16:20:28",
                            "links": {
                                "projects": "/gdc/account/profile/{user-id}/projects",
                                "self": "/gdc/account/profile/{user-id}"
                            }
                        }
                    },
                    {
                        "accountSetting": {
                            "companyName": "",
                            "country": "",
                            "created": "2011-11-03 15:16:52",
                            "firstName": "Alice",
                            "lastName": "Wonderland",
                            "login": "example@company.com",
                            "phoneNumber": "",
                            "position": "",
                            "settings": "",
                            "timezone": null,
                            "ssoProvider":"SSO-PROVIDER",
                            "updated": "2011-12-15 14:40:37",
                            "links": {
                                "projects": "/gdc/account/profile/{user-id}/projects",
                                "self": "/gdc/account/profile/{user-id}"
                            }
                        }
                    }
                ]
            }
        }


## /gdc/account/domains/{organization-name}/users?login={some-encoded-login}
### GET
To GET specific user in Organization that fits the login parameter.

**Login parameter:** You can use _login_ parameter that will return exactly one user object specify by email that is [encoded](http://en.wikipedia.org/wiki/Percent-encoding#Percent-encoding_reserved_characters). Example  
login: _user@gooddata.com_ will be encoded as _?login=user%40gooddata.com_

+ Request
    + Headers

            Accept: application/json

+ Response 200

         {
              "accountSettings": {
                  "paging": {
                      "offset": 0,
                      "count": 1
                },
                "items": [
                    {
                        "accountSetting": {
                            "companyName": null,
                            "country": null,
                            "created": "2014-02-24 18:51:53",
                            "firstName": "John",
                            "lastName": "Doe",
                            "login": "example@company.com",
                            "phoneNumber": null,
                            "position": null,
                            "timezone": null,
                            "updated": "2014-02-24 18:51:53",
                            "links": {
                                "projects": "/gdc/account/profile/{user-id}/projects",
                                "self": "/gdc/account/profile/{user-id}"
                            },
                            "email": "example@company.com"
                        }
                    }
                ]
            }
         }


## /gdc/projects/{project-id}/users?offset=0&limit=5
### GET
To GET all users in Project

* **Paging:** This resource optionally allows paging. Add `offset` and `limit` parameters at the end of the URI.  
**Example:** users?offset=1&limit=3 
* **User status:** You can optionally return only users of a specifed status with a `status` parameter at the end of the API.  
**Values:** enabled | disabled  
**Example:** /gdc/projects/{project-id}/users?status=enabled
 
+ Request
    + Headers

            Accept: application/json

+ Response 200

        {
           "users" : [
              {
                 "user" : {
                    "content" : {
                       "email" : "user@domain.com",
                       "firstname" : "John",
                       "userRoles" : [
                          "/gdc/projects/{project_id}/roles/{role-id}"
                       ],
                       "phonenumber" : "+777777777",
                       "status" : "ENABLED",
                       "lastname" : "Doe",
                       "login" : "user@domain.com"
                    },
                    "links" : {
                       "roles" : "/gdc/projects/{project_id}/users/{user-id}/roles",
                       "permissions" : "/gdc/projects/{project_id}/users/{user-id}/permissions",
                       "groups" : "/gdc/projects/{project_id}/users/{user-id}/groups",
                       "self" : "/gdc/account/profile/{project_id}",
                       "invitations" : "/gdc/account/profile/{project_id}/invitations",
                       "projects" : "/gdc/account/profile/{project_id}/projects",
                       "projectRelUri" : "/gdc/projects/{project_id}/users/{user-id}"
                    },
                    "meta" : {
                       "created" : "2011-08-10 08:37:46",
                       "updated" : "2013-05-27 11:08:09",
                       "author" : "/gdc/account/profile/{user-id}",
                       "title" : "Jane Doe",
                       "contributor" : "/gdc/account/profile/{user-id}"
                    }
                 }
              }
           ]
        }
        



## /gdc/projects/{project-id}/users
### POST
To add created User to the Project. There are several default User roles in every project:  

- readOnlyUserRole  
- dashboardOnlyRole  
- adminRole  
- editorRole  
- unverifiedAdminRole  

These roles don't have fixed ID. You need to GET the information from diferent API call. See the Project API section.

+ Request
    + Headers

            Accept: application/json

    + Body

            { "user" : {
                 "content" : {
                       "status":"ENABLED",
                       "userRoles":["/gdc/projects/{project-id}/roles/{role-id}"]
                             },
                 "links"   : {
                       "self":"/gdc/account/profile/{user-id}"
                            }
                }
            }

+ Response 200

        {"projectUsersUpdateResult":{
            "successful":["/gdc/account/profile/{user-id}"],
            "failed":[]}
        }


## /gdc/projects/{project-id}/users
### POST
To **disable** user in the Project use similar call as for provisioning. But use the DISABLED key word instead  

+ Request
    + Headers

            Accept: application/json

    + Body

            { "user" : {
                 "content" : {
                       "status":"DISABLED",
                       "userRoles":["/gdc/projects/{project-id}/roles/{role-id}"]
                             },
                 "links"   : {
                       "self":"/gdc/account/profile/{user-id}"
                            }
                }
            }

+ Response 200

        {"projectUsersUpdateResult":{
            "successful":["/gdc/account/profile/{user-id}"],
            "failed":[]}
        }
        

## /gdc/account/profile/current
### GET
You can get information about your currently logged in user. 

+ Request (application/json)
    + Headers

            Accept: application/json

    + Body

            {
            "accountSetting": {
                  "country": "cz",
                  "firstName": "George",
                  "ssoProvider": null,
                  "timezone": null,
                  "position": "",
                  "companyName": "GoodData",
                  "login": "user@gooddata.com",
                  "email": "user@gooddata.com",
                  "created": "2011-08-10 08:37:46",
                  "updated": "2014-03-17 14:02:40",
                  "lastName": "Smith",
                  "phoneNumber": "123456789",
                  "links" : {
                        "self" : "/gdc/account/profile/{user-id}",
                        "projects" : "/gdc/account/profile/{user-id}/projects"
                            }
                }
              }

+ Response 200


## /gdc/projects/{project-id}/invitations
### POST
Use this resource for invite user to the Project. The invitation email will be sent.

+ Request
    + Headers

            Accept: application/json

    + Body

            {
                "invitations": [
                    {
                        "invitation": {
                            "content": {
                                "email": "invited.user.mail@company.com",
                                "userFilters": [ "/gdc/md/{project_id}/obj/{object_id}" ], 
                                "role": "/gdc/projects/{project-id}/roles/{role-id}",
                                "firstname": "firstname",
                                "lastname": "lastname",
                                "action": {
                                    "setMessage": "You can set message here!"
                                }
                            }
                        }
                    }
                ]
            }

+ Response 200

        {
            "createdInvitations": {
                "uri": [
                    "/gdc/projects/{project-id}/invitations/{invitation-id}"
                ]
            }
        }

## /gdc/account/profile/{user-id}
### PUT
You are able to update the User information 

+ Request (application/json)
    + Headers

            Accept: application/json

    + Body

            {
                "accountSetting": {
                    "firstName": "John",
                    "lastName": "Doe",
                    "ssoProvider": "salesforce.com",
                    "old_password" : "current password",
                    "password": "new password",
                    "verifyPassword": "new password"
                }
            }

+ Response 200

### DELETE
Use this request to delete User 

+ Request
    + Headers

            Accept: application/json

+ Response 200


## Manage default embedded objects for a user [/gdc/account/profile/{profile_id}/settings/defaults]

Use default embedding values to direct a user to an embedded project without specifying a project, dashboard, or tab ID in the URL.  
When a user navigates to `https://secure.gooddata.com/dashboard.html`, the objects you specified using this resource are loaded (as if the parameter values are appended to `https://secure.gooddata.com/dashboard.html`). These settings are typically set up during user provisioning.

Default embedded objects settings are part of a user’s profile. Organizational admins can manage default embedded objects for any user in their organization. Admins must have access to the project where an object exists to set is as a default embedded object (that is, the admin must be a member of that project).

**Note:** If no default embedded objects are specified, the user is directed to the first project, dashboard and tab in their profile.

**Steps:**

1. Set up the default embedded objects for a user with this resource.
2. The user navigates to `https://secure.gooddata.com/dashboard.html`.  
3. The project, and optionally the dashboard and tab specified as default embedded objects are loaded.


+ Parameters
    + profile_id (string, required)...The ID of the user you are managing default embedded objects for. 

### Create or update default embedded objects [PUT]

* `projectUri` (required, URI) -  the URI of the project to be displayed.
* `dashboardUri` (optional, URI) -  the URI of the dashboard to be displayed. This dashboard must be part of the project specified in `projectUri`.  
**Default:** When no dashboard is specified, the first dashboard in the project is loaded.
* `tabId` (optional, string) - The ID of the tab to be displayed. This tab must be part of the dashboard specified in `dashboardUri`.  
**Default:** When no tab is specified, and first tab in the dashboard is loaded.

+ Request (application/json)


    + Body

            {
              "defaults" : {
                "projectUri" : "/gdc/projects/GoodSalesDemo",
                "dashboardUri" : "/gdc/md/GoodSalesDemo/obj/{dashboard_id}",
                "tabId" : {tab_id}
                }
              }
            }

+ Response 204 (application/json)


###  Get default embedded objects [GET]

**Response**

* `projectUri` -  the URI of the project to be displayed.
* `dashboardUri` -  the URI of the dashboard to be displayed. This dashboard must be part of the project specified in `projectUri`.  
**Default:** When no dashboard is specified, the first dashboard in the project is loaded.
* `tabId` - The ID of the tab to be displayed. This tab must be part of the dashboard specified in `dashboardUri`.  
**Default:** When no tab is specified, and first tab in the dashboard is loaded.
* `self` - The URI of the user the default embedded objects apply to.

+ Request (application/json)

        
+ Response 200 (application/json)

           {
              "defaults" : {
                "projectUri" : "/gdc/projects/GoodSalesDemo",
                "dashboardUri" : "/gdc/md/GoodSalesDemo/obj/{dashboard_id}",
                "tabId" : {tab_id}, 
                "links" : {
                  "self" : "/account/profile/{profile_id}/settings/defaults"
                }
              }
            }

### Delete default embedded objects [DELETE]

+ Request (application/json)



+ Response 204 (application/json)


# Group User Groups

>User group functionality is currently a BETA offering. You can manage user groups only through the GoodData APIs. We are busily implementing user group management in the GoodData Portal. Stay tuned.


Use user groups to manage user access to dashboards on the GoodData Portal. Create groups to more quickly manage permissions for users with the the same role or who need similar access to dashboards. 
 Groups can be part of groups. 


## Create a User Group [/gdc/internal/usergroups]

### Create a user group [POST]


+ Request (application/json)

        {
            "userGroup": {
                "content": {
                    "name": "{group_name}",
                    "description": "{group_description}",
                    "project": "/gdc/projects/{project_id}"
                 }
            }
        }

+ Request (application/json)

        {
            "userGroup": {
                 "content": {
                    "name": "{group_name}",
                    "description": "{group_description}",
                    "project": "/gdc/projects/{project_id}"
                }
            }
        }

+ Response 201

+ Response 409


## Manage a User Group [/gdc/internal/usergroups/{group_id}]

+ Parameters

    + group_id (required, string) ... The ID of the user group.

### Get user group details [GET]

+ Response 200 (application/json)

        {
            "userGroup": {
                "content": {
                    "name": "{group_name}",
                    "id": "{group_id}",
                    "description": "The groupiest of groups.",
                    "domain": "/gdc/account/domains/default",
                    "project": "/gdc/projects/{project_id}"
                },
               "meta": {
                    "created": "2003-02-01 12:34:56",
                    "author": "/gdc/account/profile/{profile_id}",
                    "updated": "2003-02-01 12:34:56",
                    "contributor": "/gdc/account/profile/{profile_id}"
                 },
                "links": {
                    "self": "/gdc/internal/usergroups/{group_id}",
                    "members": "/gdc/internal/usergroups/{group_id}/members",
                    "modifyMembers": "/gdc/internal/usergroups/{group_id}/modifyMembers"
                }
            }
        }

### Update a user group [PUT]

+ Request (application/json)

        {
            "userGroup": {
                "content": {
                    "id": "{group_id}",
                    "name": "{group_name}",
                    "description": "This group is full of awesome people.",
                    "project": "/gdc/projects/{project_id}
                }
            }
        }

+ Response 204

### Delete a user group [DELETE]

+ Response 204

## List User Groups [/gdc/internal/usergroups{?domain,project,user,userGroup,uriOnly,includeImplicit,includeIndirect,includeParent,offset,limit}]

+ Parameters
    + project (optional, string) ... The ID of the project.
    + user (optional, string) ... The ID of the user you want group membership for.
    + userGroup (optional, string) ... The ID of a group that you want group membership for (so, what groups is the group part of).
    + uriOnly = `false` (optional, boolean) ... If true, response will contain URIs only.
    + includeImplicit = `false` (optional, boolean) ... If true, implicit groups will be included (built-in system groups).
    + includeIndirect = `false` (optional, boolean) ... If true, indirect groups will be included.
    + includeParent = `false` (optional, boolean) ... If true, parent groups will be included.
    + offset (optional, string) ... Offset of the first record.
    + limit (optional, integer) ... Maximum number of records per page.

### List users groups [GET]

Returns a paged list of user groups. You can specify both filtering and paging. Use only the following filter combinations:

+ `project` - List all groups for this project.
+ `project` + `user` - List groups that this user is belongs to for this project. The user must be part of the project.
+ `project` + `userGroup` - List groups that this user group belongs to for this project. The user group must be part of the project.

+ Response 200 (application/json)

        {
            "userGroups": {
                "paging": {
                    "offset": "current_offset",
                    "limit": 3,
                    "next": "next_page_url"
                },
                "items": [
                    {
                        "userGroup": {
                            "content": {
                                "name": "{group_name_1}"
                             },
                            "meta": {
                                "created": "2001-02-03T04:05:06",
                                "author": "{uri_created_by_1}",
                                "updated": "2001-02-03T04:05:06",
                                "contributor": "{uri_modified_by_1}"
                            },
                            "links": {
                                "self": "{uri_link_self_1}"
                            }
                        }
                    },
                    {
                        "userGroup": {
                            "content": {
                                "name": "{group_name_2}"
                            },
                           "meta": {
                                "created": "2001-02-03T04:05:06",
                                "author": "{uri_created_by_2}",
                                "updated": "2001-02-03T04:05:06",
                                "contributor": "{uri_modified_by_2}"
                            },
                            "links": {
                                    "self": "{uri_link_self_2}"
                            }
                        }
                    }
                ]
            }
        }

+ Response 200 (application/json)

        {
            "uris": {
                "paging": {
                    "offset": "some_offset",
                    "limit": 3,
                    "next": "/gdc/internal/usergroups?offset=next_offset"
                },
                "items": [
                    "/gdc/internal/usergroups/{group_id1}",
                    "/gdc/internal/usergroups/{group_id2}",
                    "/gdc/internal/usergroups/{group_id3}"
                ]
            }
        }



## List User Group Members [/gdc/internal/usergroups/{group_id}/members{?offset,limit}]

+ Parameters

    + group_id (required, string) ... The ID of the user group.
    + offset (optional, string) ... The offset of the first record (for paging).
    + limit (optional, integer) ... The maximum number of records per page.
    
### List user group members [GET]

+ Response 200 (application/json)

        {
            "userGroupMembers": {
                "paging": {
                    "offset": "some_offset",
                    "limit": 5,
                    "next": "/gdc/internal/usergroups/id/members?offset=next_offset"
                },
                "items": [
                    {
                        "userGroup": {
                            "content": {
                                "name": "{group_name)",
                                "id": "{group_id}"
                            }
                            "links": {
                                "self": "/gdc/internal/usergroups/{group_id}"
                            }
                        }
                    },
                    {
                        "user": {
                            "content": {
                                "firstName": "Leonard",
                                "lastName": "Nimoy"
                            }
                            "links": {
                                "self": "/gdc/account/profile/{profile_id}"
                            }
                        }
                    }
                ]
            }
        }

## Modify User Group Members [/gdc/internal/usergroups/{group_id}/modifyMembers]

+ Parameters

    + group_id (required, string) ... The ID of the group whos members you want to modify.
    
### Modify user group members [POST]

* `operation` - Specifies how to modify user group members.
    - `SET`- Removes all existing group members and adds any specified users (replace).
    - `ADD` - Adds the specified users to the group. If you add a user who already exists in a group, you receive a `200` response.
    - `REMOVE` - Removes all group members. If you remove a user who is not part of a group, you receive a `200` response.


+ Request (application/json)

        {
            "modifyMembers": {
                "operation": "SET",
                "items": [
                    "/gdc/internal/usergroups/{group_id}",
                    "/gdc/account/profile/{profile_id}",
                    "/gdc/internal/usergroups/{group_id}",
                    "/gdc/account/profile/{profile_id}"
                ]
            }
        }
    
+ Response 200


# Group Project Model
<a id="projectmodel" ></a>
The data model is the core concept of GoodData. It can be managed and validated using following API resources. Model is created/managed by using the MAQL language and script.

##Model properties
- maql : MAQL script for creating/updating logical data model
- validateProject : IO - Input/Output, LDM - Logical Data Model, PDM - Physical Data Model

## Project Model Representation

### Common properties of model objects:
Types of object for which the given property is applicable are included in parentheses.

* ``identifier`` _required_ (dataset, attribute, fact, label) - identifier unique among all objects; it must start with a letter, followed by lower and upper-case letters, numbers, dots ``.`` and underscores ``_``
* ``title`` _required_ (dataset, date dimension, attribute, fact, label) - short human-readable description of the object; main representation of the object in UI
* ``description`` (dataset, attribute, fact, label) - longer human-readable description of the object
* ``folder`` (attribute, fact) - title of folder in which the object should be categorized
* ``dataType`` (fact, label) - specifies data type of values loaded for the given object; defaults to ``DECIMAL(12,2)`` for facts and ``VARCHAR(128)`` for labels

### Special properties of model objects:

* __Dataset__
    * ``anchor`` - attribute with finest granularity (same granularity as facts, if there are any) that provides identity to dataset records and can be used for ``COUNT``ing number of records in it's fact table; dataset _A_ is required to have an anchor with at least one label if there's a dataset _B_  that has a reference to _A_ (values of anchor's label are used to link data from multiple datasets together)
    * ``attributes`` - all other attributes in the dataset (except anchor); these have coarser granularity than the anchor and can be used in reports build from facts in the same dataset; f.ex. if anchor is _Employee ID_ then _Sex_ could be one of the attributes
    * ``facts`` - facts about the concept identified by anchor; f.ex. if anchor is _Employee ID_, _Age_ could be one of the facts
    * ``references`` - array of identifiers of other datasets and names of date dimensions; if dataset _Employee_ has a _reference_ to dataset _Department_, then you can use attributes of _Department_ in reports based on facts of _Employee_
* __DateDimension__
    * ``name`` _required_ - identifies the date dimension; rules for ``identifier``s apply (must be unique, limited characters)
* __Attribute__
    * ``defaultLabel`` - identifier of the label that contains default visual representation of attribute's value
    * ``sortOrder`` - defines how attribute values should be ordered; you must specify label to sort by and direction - sample value: ``{ "attributeSortOrder" : { "label" : "label.person.id.name", "direction" : "ASC" } }``
* __Label__
    * ``type`` - type of label; defaults to ``GDC.text``; supported values:
        * ``GDC.text`` - normal label, presented as plain text in the UI
        * ``GDC.link`` - label contains URL and is presented as clickable hyperlink in the UI

## Obtaining current LDM of a project

Assembly of project model is currently a lehgthy process and so the API has to be asynchronous. We'll try to optimize this in the future.

When inspecting project metadata, we may find out that project does not conform to rules described in [Limitations](#pma-limitations). The result in that case will still be a ``200 OK``, but you'll see some validation errors returned together with the resulting model. You should not rely on such model. It's only provided for convenience so that it can be inspected. You won't be able to modify such project through Project Model API.

Properties of validation error:

* ``code`` - unique code of the type of validation problem (can be relied on as a localization key for ``message``)
* ``context`` - array of identifiers of objects breaking validation rules
* ``message`` - human-readable message describing the problem (with ``%s`` placeholders for message params)
* ``parameters`` - parameters for the message
* ``reparable`` - ``true`` if this problem can be repaired through this API, ``false`` if you won't be available to perform diffs against such project & will have to resolve the problem manually (f.ex. through hand-crafted MAQL DDL)

_List of validation errors will be empty for projects with supported models. If it isn't, you'll have to manually resolve (through MAQL DDL) all issues before you'll be able to use this API to update such project's model._

## GET /gdc/projects/{project-id}/model/view
Starts project model assembly. Returns link to a polling resource that will eventually return assembled model.

+ Request

    + Headers

            Accept: application/json

+ Response 202 (application/json)

    + Headers

            Location: /gdc/projects/{project-id}/model/view/{view-id}

    + Body

            {
                "asyncTask": {
                    "link": {
                        "poll": "/gdc/projects/{project-id}/model/view/{view-id}"
                    }
                }
            }

## GET /gdc/projects/{project-id}/model/view/{view-id}
Poll to obtain assembled project model.

<!--**Note:** Computed attributes do not appear in project models.
-->
+ Request

    + Headers

            Accept: application/json

    + Response 202 (application/json)

            {
                "asyncTask": {
                    "link": {
                        "poll": "/gdc/projects/{project-id}/model/view/{view-id}"
                    }
                }
            }

    + Response 200 (application/json)

        + Body

                {
                    "projectModelView": {
                        "model": {
                    "projectModel": {
                     "datasets": [
                      {
                        "dataset": {
                            "identifier": "dataset.salary",
                            "title": "Payments",
                            "anchor": {
                                "attribute": {
                                    "identifier": "attr.salary.salary",
                                    "title": "Salary ID",
                                    "labels": [
                                        {
                                            "label": {
                                                "identifier": "label.salary.salary",
                                                "title": "Salary ID",
                                                "type": "GDC.text",
                                                "dataType": "VARCHAR(128)"
                                            }
                                        }
                                    ],
                                    "defaultLabel": "label.salary.salary"
                                }
                            },
                            "facts": [
                                {
                                    "fact": {
                                        "identifier": "fact.salary.payment",
                                        "title": "Payment",
                                        "dataType": "DECIMAL(12,2)"
                                    }
                                }
                            ],
                            "references": [
                                "dataset.employee",
                                "salary"
                            ]
                        }
                    },
                    {
                        "dataset": {
                            "identifier": "dataset.employee",
                            "title": "Employee",
                            "anchor": {
                                "attribute": {
                                    "identifier": "attr.employee.employee",
                                    "title": "Employee ID",
                                    "labels": [
                                        {
                                            "label": {
                                                "identifier": "label.employee.employee",
                                                "title": "Employee ID",
                                                "type": "GDC.text",
                                                "dataType": "VARCHAR(128)"
                                            }
                                        }
                                    ],
                                    "defaultLabel": "label.employee.employee"
                                }
                            },
                            "attributes": [
                                {
                                    "attribute": {
                                        "identifier": "attr.employee.name",
                                        "title": "Name",
                                        "labels": [
                                            {
                                                "label": {
                                                    "identifier": "label.employee.name",
                                                    "title": "Name",
                                                    "type": "GDC.text",
                                                    "dataType": "VARCHAR(128)"
                                                }
                                            }
                                        ],
                                        "defaultLabel": "label.employee.name"
                                    }
                                }
                            ],
                            "references": [
                                "dataset.department"
                            ]
                        }
                    },
                    {
                        "dataset": {
                            "identifier": "dataset.department",
                            "title": "Department",
                            "anchor": {
                                "attribute": {
                                    "identifier": "attr.department.department",
                                    "title": "Department ID",
                                    "labels": [
                                        {
                                            "label": {
                                                "identifier": "label.department.department",
                                                "title": "Department ID",
                                                "type": "GDC.text",
                                                "dataType": "VARCHAR(128)"
                                            }
                                        },
                                        {
                                            "label": {
                                                "identifier": "label.department.department.name",
                                                "title": "Name",
                                                "type": "GDC.text",
                                                "dataType": "VARCHAR(128)"
                                            }
                                        }
                                    ],
                                    "defaultLabel": "label.department.department"
                                }
                            }
                        }
                    }
                ],
                "dateDimensions": [
                    {
                        "dateDimension": {
                            "name": "salary",
                            "title": "Pay Date"
                          }
                        }
                      ]
                     }
                     }
                    }
                }
                
# Group Generate MAQL DDL to update project

<a id="generatemaqlddltoupdateproject" ></a>

Resources to generate MAQL DDL to update project's model to the desired target state. It does not modify the model itself, but gives you MAQL DDL scripts that can be executed via the ``/gdc/md/{project-id}/ldm/manage2`` resource.

### The result

### Update operations

Diff between the two model states - operations that should be applied to current project model to make it equal to the submitted ``targetModel``. The list is not meant to be an authoritative representation of the diff. It's granularity is based on current MAQL DDL grammar and it can be changed in the future without notice. It's therefore more useful for presentation to user for inspection than automatic inspection in code.

List of update operations will be empty if the project's model is already equal to the provided ``targetState``.

Each update operation has the following properties:

* ``type`` - unique identifier of operation type (can be relied on as localization key for the description); in time, new operation types may be created and old ones discontinued; we don't recommend relying on it's value for anything besides grouping simmilar changes together
* ``dataset`` - optional identifier of the dataset to which this operation is related; inteded for presentation purposes
* ``destructive`` - ``true`` if the operation may result in dropping existing PDM objects, ``false`` otherwise
* ``description`` - human-readable description of the change (with ``%s`` placeholders for parameters)
* ``parameters`` - parameters for the ``description``

### Update scripts

If the list of update operations is non-empty, ``updateScripts`` property of the response will contain one or more variants of MAQL DDL that can be executed to actually evolve project's model. Each variant is generated with distinct settings and some combination of optionas may not be available (see below).

Each update script has the following properties:

* ``maqlDdlChunks`` - a list of MAQL DDL scripts that can executed sequentially via the ``/gdc/md/{project-id}/ldm/manage2`` resource to actually perform model evolution
* ``preserveData`` - ``true`` if script execution won't truncate data currently loaded in affected datasets, ``false`` otherwise; some changes of the model will result in this option not being available (``preserveData: false`` in all update script variants)
* ``cascadeDrops`` - ``true`` if generated MAQL use ``DROP``s with the ``CASCADE`` option; such drops transitively delete all dashboard objects connected to the dropped LDM object, so you should only execute it if you're certain that you don't need metrics / reports / dashboards that use the dropped object; if the generated MAQL doesn't drop anything, this option will be ``false`` in all update script variants

## Example

In the example below, we simulate generation of evolution MAQL script for the model included in the example response of the ``/gdc/projects/{project-id}/model/view`` resource. The target model contains one extra fact (``fact.employee.age``).

## POST /gdc/projects/{project-id}/model/diff
Post desired target LDM state to start the MAQL generation process. Returns link to a polling resource that will eventually return the diff.

+ Request

    + Headers

            Accept: application/json
            Content-Type: application/json

    + Body

            {
                "diffRequest": {
                    "targetModel": {
                        "projectModel": {
                            "datasets": [
                                {
                                    "dataset": {
                                        "identifier": "dataset.employee",
                                        "title": "Employee",
                                        "anchor": {
                                            "attribute": {
                                                "identifier": "attr.employee.employee",
                                                "title": "Employee",
                                                "folder": "Employee",
                                                "labels": [
                                                    {
                                                        "label": {
                                                            "identifier": "label.employee.employee",
                                                            "title": "Employee",
                                                            "dataType": "INT",
                                                            "type": "GDC.text"
                                                        }
                                                    },
                                                    {
                                                        "label": {
                                                            "identifier": "label.employee.employee.name",
                                                            "title": "Employee Name",
                                                            "dataType": "VARCHAR(128)",
                                                            "type": "GDC.text"
                                                        }
                                                    }
                                                ],
                                                "defaultLabel": "label.employee.employee.name",
                                                "sortOrder": { 
                                                    "attributeSortOrder" : { 
                                                        "label" : "label.employee.employee.name",
                                                        "direction" : "ASC"
                                                    }
                                                }
                                            }
                                        },
                                        "facts": [
                                            {
                                                "fact": {
                                                    "identifier": "fact.employee.age",
                                                    "title": "Employee Age",
                                                    "folder": "Employee"
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "dataset": {
                                        "identifier": "dataset.salary",
                                        "title": "Salary",
                                        "anchor": {
                                            "attribute": {
                                                "identifier": "attr.salary.factsof",
                                                "title": "Records of Salary",
                                                "folder": "Salary"
                                            }
                                        },
                                        "facts": [
                                            {
                                                "fact": {
                                                    "identifier": "fact.salary.payment",
                                                    "title": "Payment",
                                                    "folder": "Salary",
                                                    "dataType": "DECIMAL(12,2)"
                                                }
                                            }
                                        ],
                                        "references": ["dataset.employee", "payment"]
                                    }
                                }
                            ],
                            "dateDimensions": [
                                {
                                    "dateDimension": {
                                        "name": "payment",
                                        "title": "Payment"
                                    }
                                }
                            ]
                        }
                    }
                }
            }

+ Response 202 (application/json)

    + Headers

            Location: /gdc/projects/{project-id}/model/diff/{diff-id}

    + Body

            {
                "asyncTask": {
                    "link": {
                        "poll": "/gdc/projects/{project-id}/model/diff/{diff-id}"
                    }
                }
            }

## GET /gdc/projects/{project-id}/model/diff/{diff-id}
Poll to get resulting diff & MAQL.

+ Request

    + Headers

            Accept: application/json


+ Response 202 (application/json)

        {
            "asyncTask": {
                "link": {
                    "poll": "/gdc/projects/{project-id}/model/diff/{diff-id}"
                }
            }
        }

+ Response 200 (application/json)

        {
            "projectModelDiff" : {
                "updateOperations": [
                    {
                        "updateOperation": {
                            "type": "create.fact",
                            "dataset": "dataset.employee",
                            "destructive": false,
                            "description": "Create Fact '%s'",
                            "paramaters": ["Employee Age"]
                        }
                    }
                ],
                "updateScripts": [
                    {
                        "updateScript": {
                            "maqlDdlChunks": [ "CREATE FOLDER {ffld.employee} VISUAL(TITLE \"Employee\") TYPE FACT;\nCREATE FACT {fact.employee.age} VISUAL(TITLE \"Employee Age\", FOLDER {ffld.employee}) AS {f_employee.f_age};\nALTER DATASET {dataset.employee} ADD {fact.employee.age};\nSYNCHRONIZE {dataset.employee} PRESERVE DATA;" ],
                            "preserveData": true,
                            "cascadeDrops": false
                        }
                    },
                    {
                        "updateScript": {
                            "maqlDdlChunks": [ "CREATE FOLDER {ffld.employee} VISUAL(TITLE \"Employee\") TYPE FACT;\nCREATE FACT {fact.employee.age} VISUAL(TITLE \"Employee Age\", FOLDER {ffld.employee}) AS {f_employee.f_age};\nALTER DATASET {dataset.employee} ADD {fact.employee.age};\nSYNCHRONIZE {dataset.employee};" ],
                            "preserveData": false,
                            "cascadeDrops": false
                        }
                    }
                ]
            }
        }
       
       
# Group Execute MAQL DDL and Project Model Validation

<a id="executemaqlddlandprojectmodelvalidation" ></a>

Resources to execute MAQL DDL to create/update project's model to the desired target state. 

## POST /gdc/md/{project-id}/ldm/manage
**WARNING!** - This resource **will be deprecated**. Please use [ldm/manage2](#manage2) instead.

+ Request
    
    + Headers
    
            Content-Type: application/json

    + Body

            {
               "manage" : {
                  "maql" : "CREATE ATTRIBTE {my_attribute}"
               }
            }

+ Response 200


## POST /gdc/md/{project-id}/ldm/manage2
<a id="manage2" ></a>
Resource for executing MAQL DDL Scripts for data model management. The resource is asynchronous, you have to poll the returned URL to get the result. Follow the [instructions in the article](https://developer.gooddata.com/article/creating-analytical-project-with-maql-ddl) to learn more details about Data Model Creation.

+ Request
    
    + Headers
    
            Content-Type: application/json
            Accept: application/json

    + Body

            {
               "manage" : {
                  "maql" : "CREATE ATTRIBTE {my_attribute}"
               }
            }

+ Response 200

    + Headers

            Content-Type: application/json
        
    + Body
    
            {
            "entries" : [
                 {
                     "link" : "/gdc/md/{project-id}/tasks/{task-id}/status",
                     "category" : "tasks-status"
                 }
                        ]
            }


## GET /gdc/md/{project-id}/tasks/{task-id}/status
Resource for retrieving the asynchronous task status.

+ Request
    
    + Headers
    
            Accept: application/json

    + Body

+ Response 200

    + Headers

            Content-Type: application/json
        
    + Body
    
            {
             "wTaskStatus" : {
                "poll" : "/gdc/md/{project-id}/tasks/{task-id}/status",
                "status" : "OK"
                    }
            }


## POST /gdc/md/{project-id}/validate/
Use this method to validate Project

+ Request
    + Headers

            Accept: application/json

    + Body

            { "validateProject" : [ "IO", "LDM", "PDM" ] }

+ Response 201

        {"uri" : "/gdc/md/{project-id}/validate/{task-id}"}

## GET /gdc/md/{project-id}/ldm/singleloadinterface/{dataset-name}/manifest
Here you can GET the SLI manifest. This manifest is needed to upload your data using the API directly. The SLI manifest provides column mapping between CSV file and data model.

+ Request
    + Headers

            Accept: application/json

+ Response 200

        {
            "dataSetSLIManifest": {
                "parts": [
                    {
                        "columnName": "f_quotes.dt_quote_date_id",
                        "populates": [
                            "quote.date.mdyy"
                        ],
                        "constraints": {
                            "date": "yyyy-MM-dd"
                        },
                        "mode": "FULL",
                        "referenceKey": 1
                    },
                    {
                        "columnName": "d_quotes_sector.nm_sector",
                        "populates": [
                            "label.quotes.sector"
                        ],
                        "mode": "FULL",
                        "referenceKey": 1
                    },
                    {
                        "columnName": "d_quotes_market.nm_market",
                        "populates": [
                            "label.quotes.market"
                        ],
                        "mode": "FULL",
                        "referenceKey": 1
                    },
                    {
                        "columnName": "f_quotes.f_low_price",
                        "populates": [
                            "fact.quotes.low_price"
                        ],
                        "mode": "FULL"
                    },
                    {
                        "columnName": "f_quotes.nm_id",
                        "populates": [
                            "label.quotes.id"
                        ],
                        "mode": "FULL",
                        "referenceKey": 1
                    },
                    {
                        "columnName": "f_quotes.f_volume",
                        "populates": [
                            "fact.quotes.volume"
                        ],
                        "mode": "FULL"
                    },
                    {
                        "columnName": "f_quotes.dt_quote_date",
                        "populates": [
                            "dt.quotes.quote_date"
                        ],
                        "mode": "FULL"
                    },
                    {
                        "columnName": "f_quotes.f_open_price",
                        "populates": [
                            "fact.quotes.open_price"
                        ],
                        "mode": "FULL"
                    },
                    {
                        "columnName": "d_quotes_symbol.nm_symbol",
                        "populates": [
                            "label.quotes.symbol"
                        ],
                        "mode": "FULL",
                        "referenceKey": 1
                    },
                    {
                        "columnName": "d_quotes_symbol.nm_company",
                        "populates": [
                            "label.quotes.symbol.company"
                        ],
                        "mode": "FULL"
                    },
                    {
                        "columnName": "f_quotes.f_high_price",
                        "populates": [
                            "fact.quotes.high_price"
                        ],
                        "mode": "FULL"
                    },
                    {
                        "columnName": "d_quotes_industry.nm_industry",
                        "populates": [
                            "label.quotes.industry"
                        ],
                        "mode": "FULL",
                        "referenceKey": 1
                    },
                    {
                        "columnName": "f_quotes.f_close_price",
                        "populates": [
                            "fact.quotes.close_price"
                        ],
                        "mode": "FULL"
                    },
                    {
                        "columnName": "f_quotes.f_adjusted_close_price",
                        "populates": [
                            "fact.quotes.adjusted_close_price"
                        ],
                        "mode": "FULL"
                    }
                ],
                "file": "dataset.quotes.csv",
                "dataSet": "dataset.quotes"
            }
        }


# Group Data Upload
<a id="data-upload" ></a>
The Data Upload API can be used for uploading the data directly to your Project. 
Using the resources below, you are able to start data uplaod process with the file package stored on GoodData **WebDav Server** (secure-di.gooddata.com/uploads/). 
The package must contain **upload_info.json** and **CSV** file for every dataset that you want to upload.

##Upload properties
- pullIntegration : path to directory where your upload package is stored
- pullTask : asynchronous task that is created for each data upload process

## /gdc/md/{project-id}/etl/pull
### POST
Start data upload using this resource. As parameter, use the name of WebDav directory, where you uploaded Data. Upload archive should be named upload.zip and must contain **upload_info.json** (SLI manifest) and **CSV file** with data. See the Data Model resources to learn about SLI manifest.

+ Request
    + Headers

            Accept: application/json

    + Body

            {"pullIntegration":"directory-with-upload-package"}

+ Response 200

        {
           "pullTask" : {
              "uri" : "/gdc/md/{project-id}/etl/task/{task-id}"
           }    
        }

## /gdc/md/{project-id}/etl/task/{task-id}
### GET
This is resource returned by previous POST. Poll it to get the upload status.

+ Request
    + Headers

            Accept: application/json

+ Response 200

        {
           "taskStatus" : "OK | ERROR | WARNING" 
        }

## /gdc/md/{project-id}/data/uploads/{dataset-object-id}
### GET
This resource gives you status of data uploads for specific dataset. You need to specify dataset ID in the end of the URI. This ID can be find in gdc/md/{project-id}/query/datasets resource. See the next resource definition below.

+ Request
    + Headers

            Accept: application/json

+ Response 200

        {
           "dataUploads" : {
              "uploads" : [
                 {
                    "dataUpload" : {
                       "warnings" : [],
                       "msg" : null,
                       "etlInterface" : "/gdc/md/{project-id}/obj/{obj-id}",
                       "progress" : "1.000",
                       "status" : "OK",
                       "file" : "upload_info.json",
                       "fullUpload" : 1,
                       "uri" : "/gdc/md/{project-id}/data/upload/{upload-id}",
                       "createdAt" : "2012-12-14 13:40:36",
                       "fileSize" : 155649,
                       "processedAt" : "2012-12-14 13:40:38"
                    }
                 },
                 {
                    "dataUpload" : {
                       "warnings" : [],
                       "msg" : null,
                       "etlInterface" : "/gdc/md/{project-id}/obj/{obj-id}",
                       "progress" : "1.000",
                       "status" : "OK",
                       "file" : "upload_info.json",
                       "fullUpload" : 1,
                       "uri" : "/gdc/md/{project-id}/data/upload/{upload-id}",
                       "createdAt" : "2012-12-14 13:33:39",
                       "fileSize" : 78957,
                       "processedAt" : "2012-12-14 13:33:40"
                    }
                 },
                 {
                    "dataUpload" : {
                       "warnings" : [],
                       "msg" : null,
                       "etlInterface" : "/gdc/md/{project-id}/obj/{obj-id}",
                       "progress" : "1.000",
                       "status" : "OK",
                       "file" : "upload_info.json",
                       "fullUpload" : 1,
                       "uri" : "/gdc/md/{project-id}/data/upload/{upload-id}",
                       "createdAt" : "2012-12-14 09:24:42",
                       "fileSize" : 144,
                       "processedAt" : "2012-12-14 09:24:59"
                    }
                 },
                 {
                    "dataUpload" : {
                       "warnings" : [],
                       "msg" : null,
                       "etlInterface" : "/gdc/md/{project-id}/obj/{obj-id}",
                       "progress" : "1.000",
                       "status" : "OK",
                       "file" : "upload_info.json",
                       "fullUpload" : 1,
                       "uri" : "/gdc/md/{project-id}/data/upload/{upload-id}",
                       "createdAt" : "2012-12-13 17:06:11",
                       "fileSize" : 144,
                       "processedAt" : "2012-12-13 17:06:17"
                    }
                 }
              ],
              "links" : {}
           }
        }

## /gdc/md/{project-id}/query/datasets
### GET
This resource helps you identify datasets in your project. You can easily identify dataset object id in the response.

+ Request
    + Headers

            Accept: application/json

+ Response 200

        {
            "query": {
                "entries": [
                    {
                        "link": "/gdc/md/{project-id}/obj/{obj-id}",
                        "author": "/gdc/account/profile/{user-id}",
                        "tags": "",
                        "created": "2009-07-03 14:52:50",
                        "deprecated": "0",
                        "summary": "",
                        "category": "dataSet",
                        "title": "Initially Assigned Date",
                        "updated": "2009-07-03 14:52:50",
                        "contributor": "/gdc/account/profile/{user-id}"
                    },
                    {
                        "link": "/gdc/md/{project-id}/obj/{obj-id}",
                        "author": "/gdc/account/profile/{user-id}",
                        "tags": "",
                        "created": "2010-06-16 01:11:00",
                        "deprecated": "0",
                        "summary": "",
                        "category": "dataSet",
                        "title": "Zendesk Tickets",
                        "updated": "2011-02-18 19:38:40",
                        "contributor": "/gdc/account/profile/{user-id}"
                    },
                    {
                        "link": "/gdc/md/{project-id}/obj/{obj-id}",
                        "author": "/gdc/account/profile/{user-id}",
                        "tags": "",
                        "created": "2010-06-16 01:11:04",
                        "deprecated": "0",
                        "summary": "",
                        "category": "dataSet",
                        "title": "Zendesk Tags",
                        "updated": "2011-02-10 16:07:11",
                        "contributor": "/gdc/account/profile/{user-id}"
                    },
                    {
                        "link": "/gdc/md/{project-id}/obj/{obj-id}",
                        "author": "/gdc/account/profile/{user-id}",
                        "tags": "",
                        "created": "2009-07-03 14:52:50",
                        "deprecated": "0",
                        "summary": "",
                        "category": "dataSet",
                        "title": "Last Updated Date",
                        "updated": "2009-07-03 14:52:50",
                        "contributor": "/gdc/account/profile/{user-id}"
                    },
                    {
                        "link": "/gdc/md/{project-id}/obj/{obj-id}",
                        "author": "/gdc/account/profile/{user-id}",
                        "tags": "",
                        "created": "2009-07-03 14:52:50",
                        "deprecated": "0",
                        "summary": "",
                        "category": "dataSet",
                        "title": "Assigned Date",
                        "updated": "2009-07-03 14:52:50",
                        "contributor": "/gdc/account/profile/{user-id}"
                    },
                    {
                        "link": "/gdc/md/{project-id}/obj/{obj-id}",
                        "author": "/gdc/account/profile/{user-id}",
                        "tags": "",
                        "created": "2009-07-03 14:52:50",
                        "deprecated": "0",
                        "summary": "",
                        "category": "dataSet",
                        "title": "Solved Date",
                        "updated": "2009-07-03 14:52:50",
                        "contributor": "/gdc/account/profile/{user-id}"
                    },
                    {
                        "link": "/gdc/md/{project-id}/obj/{obj-id}",
                        "author": "/gdc/account/profile/{user-id}",
                        "tags": "",
                        "created": "2009-07-03 14:52:50",
                        "deprecated": "0",
                        "summary": "",
                        "category": "dataSet",
                        "title": "Due Date",
                        "updated": "2009-07-03 14:52:50",
                        "contributor": "/gdc/account/profile/{user-id}"
                    },
                    {
                        "link": "/gdc/md/{project-id}/obj/{obj-id}",
                        "author": "/gdc/account/profile/{user-id}",
                        "tags": "",
                        "created": "2009-07-03 14:52:50",
                        "deprecated": "0",
                        "summary": "",
                        "category": "dataSet",
                        "title": "Created Date",
                        "updated": "2009-07-03 14:52:50",
                        "contributor": "/gdc/account/profile/{user-id}"
                    }
                ],
                "meta": {
                    "summary": "Metadata Query Resources for project '{project-id}'",
                    "title": "List of datasets",
                    "category": "query"
                }
            }
        }

# Group Notifications
<a id="notifications" ></a>




## Create or get channels for a user [/gdc/account/profile/{profile_id}/channelConfigurations]

Create a notification channel before you create a subscription. A _subscription_ tracks events on the GoodData Platform and sends a notification if a trigger condition occurs in the GoodData Portal. The subscription sends its notification through the channel. For example, if you work in sales you could create an email notification channel, and set a subscription that generates an email every time a new sales opportunity occurs.  


**Note:** You can also set up a simple notification in one step. For more information, see [CloudConnect notifications](http://docs.gooddata.apiary.io/#cloudconnectnotifications).

+ Parameters
    + profile_id (string,required)...The ID of the user profile where the notification channel exists or will exist.
    

### Create a notification channel [POST]

* `to` (string, required) - The email address notifications will be sent to.
* `title` (string, required) - The name of the channel.

**NOTE:** This JSON body creates an email channel. You can also create Twilio, Salesforce, and REST channels. For information on creating these channels, see [this article](https://developer.gooddata.com/article/setting-up-the-notifications-using-api).

+ Request (application/json)
    + Headers 

            Accept: application/json

    + Body

             {
               "channelConfiguration":{
                  "configuration":{
                     "emailConfiguration":{
                        "to":"your@email.com"
                     }
                  },
                  "meta":{
                     "title":"Channel title"
                  }
               }
            }

+ Response 201

            {
               "channelConfiguration":{
                  "configuration":{
                     "emailConfiguration":{
                        "to":"your@email.com"
                     }
                  },
                  "meta":{
                    "title":"Channel title",
                    "author": "/gdc/account/profile/{profile_id}",
                    "category": "channelConfiguration",
                    "updated": "2011-12-20 13:43:17",
                    "created": "2011-12-20 13:43:17",
                    "uri": "/gdc/account/profile/{profile_id}/channelConfigurations/{channel_id}"
                }
            }
        }

### Get channels for a user [GET]

* `disabled` - Specifies that there is an error in channel configuration and the channel is disabled. Review your channel configuration.

**NOTES:**
* See **Create a notification channel** for additional JSON description.
* This example gets email and Salesforce channels. For information on Twilio and REST channels, see [this article](https://developer.gooddata.com/article/setting-up-the-notifications-using-api).




+ Request (application/json)
    + Headers 

            Accept: application/json
            
    + Body

            
+ Response 200 (application/json)
           
            {
              "channelConfigurations" : {
                "items" : [ {
                  "channelConfiguration" : {
                    "configuration" : {
                      "emailConfiguration" : {
                        "to" : "email@gooddata.com"
                      }
                    },
                    "meta" : {
                      "created" : "2013-01-23 08:38:47",
                      "updated" : "2013-01-23 08:38:47",
                      "category" : "channelConfiguration",
                      "author" : "/gdc/account/profile/{profile_id}",
                      "title" : "email channel 2",
                      "uri" : "/gdc/account/profile/{profile_id}channelConfigurations/{channel_id}"
                    }
                  }
                }, {
                  "channelConfiguration" : {
                    "configuration" : {
                      "emailConfiguration" : {
                        "to" : "recipient@gooddata.com"
                      }
                    },
                    "meta" : {
                      "created" : "2013-01-18 08:51:55",
                      "updated" : "2013-01-18 08:51:55",
                      "category" : "channelConfiguration",
                      "author" : "/gdc/account/profile/{profile_id}",
                      "title" : "email channel 1",
                      "uri" : "/gdc/account/profile/{profile_id}/channelConfigurations/{channel_id}"
                    }
                  }
                }, {
                  "channelConfiguration" : {
                    "disabled" : true,
                    "configuration" : {
                      "sfdcChatterConfiguration" : {
                        "username" : "email@yourcompany.com"
                         "password":"passwordSecurityToken"
                      }
                    },
                    "meta" : {
                      "created" : "2012-02-17 15:02:11",
                      "updated" : "2012-05-10 14:35:11",
                      "category" : "channelConfiguration",
                      "author" : "/gdc/account/profile/{profile_id}",
                      "title" : "SFDC channel",
                      "uri" : "/gdc/account/profile/{profile_id}/channelConfigurations/{channel_id}"
                    }
                  }
                } ]
              }
            }




## Manage channel configuration [/gdc/account/profile/{profile_id}/channelConfigurations/{configuration_id}]
 
+ Parameters
    + profile_id (string,required)...The ID of the user whose channel you want to GET, UPDATE, or DELETE.
    + configuration_id (string,required)...The ID of the channel that you want to GET, UPDATE, or DELETE.

 
### Get channel info [GET]

**NOTE:** This example gets a SalesForce channel. We also support Twilio, email, and REST channels. For more information, see [this article](https://developer.gooddata.com/article/setting-up-the-notifications-using-api).


+ Request (application/json)
    

    + Header
    
            Accept: application/json

    + Body
    
            
+ Response 200 (application/json)
           
    + Body
    
             {
                "channelConfiguration": {
                    "configuration": {
                        "sfdcChatterConfiguration": {
                            "username": "USERNAME@DOMAIN.COM",
                            "password":"passwordSecurityToken"
                        }
                    },
                    "meta": {
                        "title": "Channel Name",
                        "author": "/gdc/account/profile/{profile_id}",
                        "category": "channelConfiguration",
                        "updated": "2011-12-20 13:43:17",
                        "created": "2011-12-20 13:43:17",
                        "uri": "/gdc/account/profile/{profile_id}/channelConfigurations/{channel_id}"
                    }
                }
            }



### Update channel configuration [PUT] 

**SalesForce configuration**
* `username` (string, required) - User's Salesforce login email address.
* `password` (string, required) - Concatenation of user's salesforce.com password and security token.
* `title` (string, required) - The channel name.

**NOTE:** This example updates a SalesForce channel. We also support Twilio, email, and REST channels. For information on how to update these types of channels, see [this article](https://developer.gooddata.com/article/setting-up-the-notifications-using-api).

+ Request (application/json)

    + Headers
    
            Accept: application/json

    + Body

             {
                "channelConfiguration": {
                    "configuration": {
                        "sfdcChatterConfiguration": {
                            "username": "USERNAME@DOMAIN.COM",
                            "password":"passwordSecurityToken"
                        }
                    },
                    "meta": {
                        "title": "Is this thing on?"
                    }
                }
            }
            
+ Response 200 (application/json)
           
    + Body
    
             {
                "channelConfiguration": {
                    "configuration": {
                        "sfdcChatterConfiguration": {
                            "username": "USERNAME@DOMAIN.COM",
                            "password":"passwordSecurityToken"
                        }
                    },
                    "meta": {
                        "title": "Is this thing on?",
                        "author": "/gdc/account/profile/{profile_id}",
                        "category": "channelConfiguration",
                        "updated": "2011-12-20 13:43:17",
                        "created": "2011-12-20 13:43:17",
                        "uri": "/gdc/account/profile/{profile_id}/channelConfigurations/{channel_id}"
                    }
                }
            }
    
### Delete a channel [DELETE] 


+ Request (application/json)

    + Headers
    

    + Body
    
            
+ Response 204 (application/json)


           
    + Body
    
  

## Create or get subscriptions for a user [/gdc/projects/{project_id}/users/{profile_id}/subscriptions]

**Note:** You can also set up a simple notification in one step. For more information, see [CloudConnect notifications](http://docs.gooddata.apiary.io/#cloudconnectnotifications).

A _subscription_ tracks events on the GoodData Platform and sends a notification if a trigger condition occurs. A subscription sends information via a channel, which must be set up separately. For example, if you work in sales you could create an email notification channel, and set a subscription that generates an email every time a new sales opportunity occurs.


+ Parameters
    + project_id (string,required)...The ID of the project where you want to create a subscription.
    + profile_id (string,required)...The ID of the user you want to create or get subscriptions for.

### Create a subscription [POST]

* `triggers` (object, required) - Set the conditions that trigger a notification for this subscription. You can set multiple triggers for a subscription.  
* `timerEvent`- (object, optional) - Set trigger for a specific time or time interval.
* `cronEvent` - Specify a [CRON expression](http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/scheduling/support/CronSequenceGenerator.html) for `timerEvent` triggers. Notifications can be sent a minimum of 30 minutes apart because of GoodData Platform settings.
* `timezone` (string, optional) - Optionally specify a timezone for `timerEvent` objects. Timezone format is described [here](http://docs.oracle.com/javase/6/docs/api/java/util/TimeZone.html).
* `projectEventTrigger` - Specify a GoodData Platform event as a trigger. You can also create custom triggers in CloudConnect.  
**Values:**  `dataload.process.schedule`, `dataload.process.start`, `dataload.process.finish.ok`, `dataload.process.finish.error`
* `condition expression` - The specific conditions of the trigger. Specify a [JEXL expression](http://commons.apache.org/jexl/) that results in a true/false value.
* `message expression` (string, required) - The message of the generated notifiation. The message template is a JEXL template.
* `subject expression` (string, optional) - The subject of the generated email. Used only for email subscriptions.
* `channels` (array, required) - The channels notifications are sent through. List the URI for each channel.
* `title` (string, required) - Name of the subscription.

+ Request (application/json)

    + Headers 

            Accept: application/json

    + Body

            { 
               "subscription":{ 
                  "triggers":[ 
                     { 
                        "timerEvent":{ 
                           "cronExpression":"0 0 9 * * *",
                           "timezone":"America/Los_Angeles"
                        }
                     },
                     { 
                        "timerEvent":{ 
                           "cronExpression":"0 0 14 25 12 ?",
                           "timezone":"America/Los_Angeles"
                        }
                     },
                     { 
                        "projectEventTrigger":{ 
                           "types":[ 
                              "type1",
                              "type2"
                           ]
                        }
                     }
                  ],
                  "condition":{ 
                     "condition":{ 
                        "expression":"true"
                     }
                  },
                  "message":{ 
                     "template":{ 
                        "expression":"Message"
                     }
                  },
                  "channels":[ 
                     "/gdc/account/profile/{profile_id}/channelConfigurations/{channel_id}"
                  ],
                  "meta":{ 
                     "title":"Title"
                  }
               },
            }

+ Response 201

         { 
               "subscription":{ 
                  "triggers":[ 
                     { 
                        "timerEvent":{ 
                           "cronExpression":"0 0/5 * * * *",
                           "timezone":"America/Los_Angeles"
                        }
                     },
                     { 
                        "timerEvent":{ 
                           "cronExpression":"0 0 14 25 12 ?",
                           "timezone":"America/Los_Angeles"
                        }
                     },
                     { 
                        "projectEventTrigger":{ 
                           "types":[ 
                              "type1",
                              "type2"
                           ]
                        }
                     }
                  ],
                  "condition":{ 
                     "condition":{ 
                        "expression":"true"
                     }
                  },
                  "message":{ 
                     "template":{ 
                        "expression":"Message"
                     }
                  },
                  "channels":[ 
                     "/gdc/account/profile/{profile_id}/channelConfigurations/{channel_id}"
                  ],
                  "meta":{ 
                     "title":"Title",
                      "author": "/gdc/account/profile/{profile_id}",
                     "category": "subscription",
                     "updated": "2011-12-20 13:59:23",
                     "created": "2011-12-20 13:59:23",
                     "uri": "/gdc/projects/{project_id}/users/{profile_id}/subscriptions/{subscription_id}"
                  }
               },
            }

### User subscriptions by project [GET]

Gets all subscriptions for a user for the specified project. See **Create a subscription** for JSON description.

+ Request (application/json)

    + Headers
    
            Accept: application/json 
            

    + Body

            
+ Response 200 (application/json)
           
    + Body
    
            {
              "subscriptions" : {
                "items" : [ {
                  "subscription" : {
                    "meta" : {
                      "title" : "email@gooddata.com",
                      "author" : "/gdc/account/profile/{profile_id}",
                      "category" : "subscription",
                      "updated" : "2013-06-13 14:24:26",
                      "created" : "2013-06-13 14:24:26",
                      "uri" : "/gdc/projects/{project_id}/users/{profile_id}/subscriptions/{subscription_id}"
                    },
                    "triggers" : [ {
                      "projectEventTrigger" : {
                        "types" : [ "dataload.process.finish.error" ]
                      }
                    } ],
                    "message" : {
                      "template" : {
                        "expression" : "This @#$#@ didn't work."
                      }
                    },
                    "subject" : {
                      "template" : {
                        "expression" : "Problem!"
                      }
                    },
                    "condition" : {
                      "condition" : {
                        "expression" : "params.PROCESS_ID=='c13ba63f-d7f1-4c52-8988-1a2702dba8af'"
                      }
                    },
                    "channels" : [ "/gdc/account/profile/{profile_id}/channelConfigurations/{channel_id}" ]
                  }
                }, {
                  "subscription" : {
                    "triggers" : [ {
                      "projectEventTrigger" : {
                        "types" : [ "dataload.process.schedule" ]
                      }
                    } ],
                    "condition" : {
                      "condition" : {
                        "expression" : "true"
                      }
                    },
                    "message" : {
                      "template" : {
                        "expression" : "loading started."
                      }
                    },
                    "channels" : [ "/gdc/account/profile/{profile_id}/channelConfigurations/{channel_id}" ],
                    "meta" : {
                      "title" : "Test",
                      "author" : "/gdc/account/profile/{profile_id}",
                      "category" : "subscription",
                      "updated" : "2014-06-30 09:15:05",
                      "created" : "2014-06-30 09:15:05",
                      "uri" : "/gdc/projects/{project_id}/subscriptions/{subscription_id}"
                    }
                  }
                } ]
              }
            }

 


## Manage a project subscription [gdc/projects/{project_id}/users/{profile_id}/subscriptions/{subscription_id}]
 
+ Parameters
    + project_id (string,required)...The ID of the project where the process you want notifications about resides.
    + profile_id (string,required)...The ID of the user who owns the subscription.
    + subscription_id (string,required)...The ID of the subscription that you want to get, update, or delete.

**NOTE:** For JSON descriptions see the previous resource, Create or get subscriptions for a user.

### Get subscription information [GET]

See **Create a subscription** for JSON description.


+ Request (application/json)

    + Headers
        
            Accept: application/json
    

    + Body

            
+ Response 200 (application/json)
           
    + Body
    
             { 
                   "subscription":{ 
                      "triggers":[ 
                         { 
                            "timerEvent":{ 
                               "cronExpression":"0 0/5 * * * *",
                               "timezone":"America/Los_Angeles"
                            }
                         },
                         { 
                            "timerEvent":{ 
                               "cronExpression":"0 0 14 25 12 ?",
                               "timezone":"America/Los_Angeles"
                            }
                         },
                         { 
                            "projectEventTrigger":{ 
                               "types":[ 
                                  "type1",
                                  "type2"
                               ]
                            }
                         }
                      ],
                      "condition":{ 
                         "condition":{ 
                            "expression":"true"
                         }
                      },
                      "message":{ 
                         "template":{ 
                            "expression":"Message"
                         }
                      },
                      "channels":[ 
                         "/gdc/account/profile/{profile_id}/channelConfigurations/{channel_id}"
                      ],
                      "meta":{ 
                         "title":"Title",
                          "author": "/gdc/account/profile/{profile_id}",
                         "category": "subscription",
                         "updated": "2011-12-20 13:59:23",
                         "created": "2011-12-20 13:59:23",
                         "uri": "/gdc/projects/{project_id}/users/{profile_id}/subscriptions/{subscription_id}"
                      }
                   },
                }


### Update a subscription [PUT] 

See **Create a subscription** for JSON description.


+ Request (application/json)

    + Headers
    
            Accept: application/json

    + Body
    
             { 
                       "subscription":{ 
                          "triggers":[ 
                             { 
                                "timerEvent":{ 
                                   "cronExpression":"0 0/5 * * * *",
                                   "timezone":"America/Los_Angeles"
                                }
                             },
                             { 
                                "timerEvent":{ 
                                   "cronExpression":"0 0 14 25 12 ?",
                                   "timezone":"America/Los_Angeles"
                                }
                             },
                             { 
                                "projectEventTrigger":{ 
                                   "types":[ 
                                      "type1",
                                      "type2"
                                   ]
                                }
                             }
                          ],
                          "condition":{ 
                             "condition":{ 
                                "expression":"true"
                             }
                          },
                          "message":{ 
                             "template":{ 
                                "expression":"Message"
                             }
                          },
                          "channels":[ 
                             "/gdc/account/profile/{profile_id}/channelConfigurations/{channel_id}"
                          ],
                          "meta":{ 
                             "title":"Title"
                          }
                       },
                    }

          
            
+ Response 200 (application/json)
           
    + Body
    
            { 
                       "subscription":{ 
                          "triggers":[ 
                             { 
                                "timerEvent":{ 
                                   "cronExpression":"0 0/5 * * * *",
                                   "timezone":"America/Los_Angeles"
                                }
                             },
                             { 
                                "timerEvent":{ 
                                   "cronExpression":"0 0 14 25 12 ?",
                                   "timezone":"America/Los_Angeles"
                                }
                             },
                             { 
                                "projectEventTrigger":{ 
                                   "types":[ 
                                      "type1",
                                      "type2"
                                   ]
                                }
                             }
                          ],
                          "condition":{ 
                             "condition":{ 
                                "expression":"true"
                             }
                          },
                          "message":{ 
                             "template":{ 
                                "expression":"Message"
                             }
                          },
                          "channels":[ 
                             "/gdc/account/profile/{profile_id}/channelConfigurations/{channel_id}"
                          ],
                          "meta":{ 
                            "title":"Title",
                            "author": "/gdc/account/profile/{profile_id}",
                            "category": "subscription",
                            "updated": "2011-12-20 13:59:23",
                            "created": "2011-12-20 13:59:23",
                            "uri": "/gdc/projects/{project_id}/users/{profile_id}/subscriptions/{subscription_id}"
 
                          }
                       },
                    }

    
### Delete a subscription [DELETE] 


+ Request (application/json)

    + Headers
    
            Accept: application/json

    + Body


          
            
+ Response 204 (application/json)


           
    + Body
    
    


# Group Report
<a id="report" ></a>
You can manage reports using APIs. Use following resources to get a list of all reports , or execute and export selected reports.

#### Common Use Cases:

**Report Export** 

1. Use the **GET** `gdc/md/{project-id}/query/reports`
1. Identify the report you want to export by report metadata.  
1. POST the report to `gdc/xtab2/executor3` to compute the latest numbers. Use one of the following options:  
  - Report Definition URI  
  - Report URI  
1. **POST** the JSON response to `gdc/exporter/executor`  
1. Download the Report file  

**Report Creation** 

1. **POST** the valid Report Definition object to `gdc/md/{project-id}/obj`  
1. Use returned object URI (report definition) to save it as a Report by **POST**ing Report JSON to `gdc/md/{project-id}/obj`  
1. Execute the Report by sending **POST** to `gdc/xtab2/executor3` with one of the following options
  - Report Definition URI
  - Report URI

##Report Properties
- link (uri) : Link to specific Report
- author (uri) : URI of Report author
- tags : Report tags
- created (date) : Report creation date
- updated (date) : Report update date
- summary (string) : Report text summary
- report (uri) : Specific report URI
- format : Report export format (pdf, csv, png)

## /gdc/md/{project-id}/query/reports
### GET
Use this method to list all Reports in given Project

+ Request
    + Headers

            Accept: application/json

+ Response 200 (application/json)

        {
            "query": {
                "entries": [
                    {
                        "link": "/gdc/md/{project-id}/obj/{obj-id}",
                        "author": "/gdc/account/profile/{user-id}",
                        "tags": "",
                        "created": "2011-11-23 15:34:18",
                        "deprecated": "0",
                        "summary": "",
                        "title": "Report Title",
                        "category": "report",
                        "updated": "2011-11-23 15:41:44",
                        "contributor": "/gdc/account/profile/{user-id}"
                    }],
                "meta": {
                    "summary": "Metadata Query Resources for project '{project-id}'",
                    "title": "List of reports",
                    "category": "query"
                }
            }
        }


## /gdc/md/{project-id}/obj
### POST
You need to create Report Definition using this resource first, then save it as a Report by following API call.

+ Request
    + Headers

            Accept: application/json
            Content-Type: application/json

    + Body

            {
             "reportDefinition": {
                "content": {
                "filters": [],
                "format": "grid",
                "grid": {
                    "rows": [],
                    "columns": [
                        "metricGroup"
                    ],
                    "sort": {
                        "columns": [],
                        "rows": []
                    },
                    "columnWidths": [],
                    "metrics": [
                        {
                            "uri": "/gdc/md/{project-id}/obj/{user-id}",
                            "alias": ""
                        }
                    ]
                }
            },
            "meta": {
                "title": "Untitled report definition",
                "summary": "",
                "tags": "",
                "deprecated": 0,
                "category": "reportDefinition"
                }
              }
            }


+ Response 201

        {
           "uri" : "/gdc/md/{project-id}/obj/{created-object-id}"
        }


## /gdc/md/{project-id}/obj
### POST
This resource will allow you to save Report Definition as a Report (visible from UI). You need to POST the Report Definition.

+ Request
    + Headers

            Accept: application/json
            Content-Type: application/json

    + Body

            
            {
            "report": {
                "content": {
                    "domains": [],
                    "definitions": [
                      "/gdc/md/{project-id}/obj/{report-definition-object-id}"
                  ]
                },
            "meta": {
                "title": "Test Report",
                "summary": "",
                "tags": "",
                "deprecated": 0
                    }
              }
            }


+ Response 201

        {
           "uri" : "/gdc/md/{project-id}/obj/{created-report-object-id}"
        }
        

## /gdc/xtab2/executor3
### POST
Use this method to execute selected Report using the Report Definition URI.

+ Request
    + Headers

            Accept: application/json

    + Body

            {
                "report_req": {
                    "reportDefinition": "/gdc/md/{project-id}/obj/{obj-id}"
                }
            }
            

+ Response 201

        {
           "execResult" : {
              "reportView" : {
                 "chart" : {
                    "styles" : {
                       "global" : {
                          "linetype" : "smooth",
                          "colorMapping" : [
                             {
                                "guid" : "guid8",
                                "uri" : "/gdc/md/{project-id}/obj/{obj-id}"
                             }
                          ]
                       },
                       "yui_3_7_1_1_1355414802308_16890" : {
                          "axis" : {
                             "limits" : {
                                "min" : 0,
                                "max" : 75
                             }
                          }
                       }
                    },
                    "buckets" : {
                       "y" : [
                          {
                             "id" : "yui_3_7_1_1_1355414802308_16890",
                             "uri" : "metric"
                          }
                       ],
                       "color" : [],
                       "x" : [
                          {
                             "id" : "yui_3_7_1_1_1355414981915_32707",
                             "uri" : "/gdc/md/{project-id}/obj/{obj-id}"
                          }
                       ],
                       "angle" : []
                    },
                    "type" : "area"
                 },
                 "reportName" : "Mean temperature by date",
                 "columnWidths" : [],
                 "filters" : [],
                 "rows" : [],
                 "sort" : {
                    "columns" : [],
                    "rows" : []
                 },
                 "oneNumber" : {
                    "labels" : {}
                 },
                 "format" : "chart",
                 "columns" : [
                    {
                       "drillDownStepAttributeDF" : "/gdc/md/{project-id}/obj/{obj-id}",
                       "sort" : "pk",
                       "displayFormId" : "/gdc/md/{project-id}/obj/{obj-id}",
                       "attributeTitle" : "Month (Date)",
                       "baseElementURI" : "/gdc/md/{project-id}/obj/{obj-id}/elements?id=",
                       "title" : "Month (Date)",
                       "attributeId" : "/gdc/md/{project-id}/obj/{obj-id}",
                       "totals" : [
                          []
                       ]
                    },
                    "metricGroup"
                 ],
                 "metrics" : [
                    {
                       "format" : "#,##0.00",
                       "title" : "Mean Temperature [Min]",
                       "metricId" : "/gdc/md/{project-id}/obj/{obj-id}"
                    }
                 ]
              },
              "reportDefinition" : "/gdc/md/{project-id}/obj/{obj-id}",
              "dataResult" : "/gdc/md/{project-id}/dataResult/{result-id}"
           }
        }


## /gdc/xtab2/executor3
### POST
Use this method to execute selected Report using the Report URI.

+ Request
    + Headers

            Accept: application/json

    + Body

            {
                "report_req": {
                    "report": "/gdc/md/{project-id}/obj/{obj-id}"
                }
            }
            

+ Response 201

        {
           "execResult" : {
              "reportView" : {
                 "chart" : {
                    "styles" : {
                       "global" : {
                          "linetype" : "smooth",
                          "colorMapping" : [
                             {
                                "guid" : "guid8",
                                "uri" : "/gdc/md/{project-id}/obj/{obj-id}"
                             }
                          ]
                       },
                       "yui_3_7_1_1_1355414802308_16890" : {
                          "axis" : {
                             "limits" : {
                                "min" : 0,
                                "max" : 75
                             }
                          }
                       }
                    },
                    "buckets" : {
                       "y" : [
                          {
                             "id" : "yui_3_7_1_1_1355414802308_16890",
                             "uri" : "metric"
                          }
                       ],
                       "color" : [],
                       "x" : [
                          {
                             "id" : "yui_3_7_1_1_1355414981915_32707",
                             "uri" : "/gdc/md/{project-id}/obj/{obj-id}"
                          }
                       ],
                       "angle" : []
                    },
                    "type" : "area"
                 },
                 "reportName" : "Mean temperature by date",
                 "columnWidths" : [],
                 "filters" : [],
                 "rows" : [],
                 "sort" : {
                    "columns" : [],
                    "rows" : []
                 },
                 "oneNumber" : {
                    "labels" : {}
                 },
                 "format" : "chart",
                 "columns" : [
                    {
                       "drillDownStepAttributeDF" : "/gdc/md/{project-id}/obj/{obj-id}",
                       "sort" : "pk",
                       "displayFormId" : "/gdc/md/{project-id}/obj/{obj-id}",
                       "attributeTitle" : "Month (Date)",
                       "baseElementURI" : "/gdc/md/{project-id}/obj/{obj-id}/elements?id=",
                       "title" : "Month (Date)",
                       "attributeId" : "/gdc/md/{project-id}/obj/{obj-id}",
                       "totals" : [
                          []
                       ]
                    },
                    "metricGroup"
                 ],
                 "metrics" : [
                    {
                       "format" : "#,##0.00",
                       "title" : "Mean Temperature [Min]",
                       "metricId" : "/gdc/md/{project-id}/obj/{obj-id}"
                    }
                 ]
              },
              "reportDefinition" : "/gdc/md/{project-id}/obj/{obj-id}",
              "dataResult" : "/gdc/md/{project-id}/dataResult/{result-id}"
           }
        }

## /gdc/exporter/executor

* scaling (optional) - Specifies scaling when you export a tabular report to PDF format. Scaling applies to both landscape and portrait orientations.  
    * pageScalePercentage (optional, integer) - Specifies a percentage to scale the exported PDF. Cannot be used with other scaling keywords. **Default:** 100 
    * scaleToPages (optional, integer) - Specifies a maximum number of pages for the exported PDF. Cannot be used with other scaling keywords. 
    * scaleToPagesX (optional, integer) -  Shrinks the horizontal content of the exported PDF to a maximum of this number of pages. Often used with the scaleToPagesY keyword. Cannot be combined with the pageScalePercentage or scaleToPages keywords.
    * scaleToPagesY (optional, integer) - Shrinks the vertical content of the exported PDFs to a maximum number of pages. Often used with the scaleToPagesX keyword. Cannot be combined with the pageScalePercentage or scaleToPages keywords.



### Export a report [POST]

The content of the **result** section is **execResult** JSON (which is returned after report computation).


+ Request
    + Headers

            Accept: application/json

    + Body

            {
                 "result_req" : {
                    "format" : "pdf",
                    "exportOptions" : {
                        "scaling" : {
                            "scaleToPagesX" : 1
                        },
                        "pageOrientation" : "landscape",
                        "optimalColumnWidth" : "yes"
                    },
                    "result" : {
                        "execResult": {
                            "reportView": {
                                "chart": {
                                    "styles": {
                                        "global": {
                                            "linetype": "smooth",
                                            "colorMapping": [
                                                {
                                                    "guid": "guid8",
                                                    "uri": "/gdc/md/{project_id}/obj/{object_id}"
                                                }
                                            ]
                                        },
                                        "yui_3_7_1_1_1355414802308_16890": {
                                            "axis": {
                                                "limits": {
                                                    "min": 0,
                                                    "max": 75
                                                }
                                            }
                                        }
                                    },
                                    "buckets": {
                                        "y": [
                                            {
                                                "id": "yui_3_7_1_1_1355414802308_16890",
                                                "uri": "metric"
                                            }
                                        ],
                                        "color": [],
                                        "x": [
                                            {
                                                "id": "yui_3_7_1_1_1355414981915_32707",
                                                "uri": "/gdc/md/{project_id}/obj/{object_id}"
                                            }
                                        ],
                                        "angle": []
                                    },
                                    "type": "area",
                                    "axes": []
                                },
                                "reportName": "Mean temperature by date",
                                "columnWidths": [],
                                "filters": [],
                                "rows": [],
                                "sort": {
                                    "columns": [],
                                    "rows": []
                                },
                                "oneNumber": {
                                    "labels": {}
                                },
                                "format": "chart",
                                "columns": [
                                    {
                                        "drillDownStepAttributeDF": "/gdc/md/{project_id}/obj/{object_id}",
                                        "sort": "pk",
                                        "displayFormId": "/gdc/md/{project_id}/obj/{object_id}",
                                        "attributeTitle": "Month (Date)",
                                        "baseElementURI": "/gdc/md/{project_id}/obj/{object_id}/elements?id=",
                                        "title": "Month (Date)",
                                        "attributeId": "/gdc/md/{project_id}/obj/{object_id}",
                                        "totals": [
                                            []
                                        ]
                                    },
                                    "metricGroup"
                                ],
                                "metrics": [
                                    {
                                        "format": "#,##0.00",
                                        "title": "Mean Temperature [Min]",
                                        "metricId": "/gdc/md/{project_id}/obj/{object_id}"
                                    }
                                ]
                            },
                            "reportDefinition": "/gdc/md/{project_id}/obj/{object_id}",
                            "dataResult": "/gdc/md/{project_id}/dataResult/{result_id}"
                        }
                    }
                }
            }

+ Response 201

        {
        "uri":"/gdc/exporter/result/{project_id}/{result_id}"
        }



## Export a raw report [/gdc/app/projects/{project_id}/execute/raw/]

+ Parameters
    + project_id (string,required)...ID of the project where you want to execute a report.

### Export a raw report [POST]
Use this resource to export reports that are too large to be computed on the UI. It exports in raw form.

**NOTE:** Maximum report size for raw export is 10GB. Exporting a report of this size may take 20 minutes.

+ Request
    + Headers

            Accept: application/json

    + Body

            {
                "report_req": {
                    "reportDefinition":"/gdc/md/{project_id}/obj/{object_id}"
                    }
            }

+ Response 201

        {
            "uri":"/gdc/projects/{project_id}/execute/raw/{report_id}"
        }


# Group Dashboard
<a id="dashboard" ></a>
Following resources cover Project Dashboard operation. You can list all Dashboards in Project, GET Dashboard content and update it.


## Drill into a dashboard reportItem

You can define a drill for a `reportItem` on a dashboard. See the example in the JSON of Create a dashboard.

* `drills` (optional) - Specifies that you can drill into the object.
    * `target` (required) - Specifies the type of drill. If the target value is export, you must also include the `export` object.  
    **Values:** pop-up | in-place | new-window | export  
    * `export` (optional) - Configures the export. Include this object only if you specified a `target` value of `export`. 
        * `format` (required) - Specifies the format of the export.   
        **Values:** csv | xlsx
    * `definition` (required) - Defines the drill object relationships. You can also define the drill from the GoodData Portal.



## List project dashboards [/gdc/md/{project_id}/query/projectdashboards?showAll=0]

+ Parameters
   + project_id (string, required)...ID of the project whose dashboards you want to list.
   + showAll (boolean, optional)...Specifies whether to list hidden dashboards. If value is `0`, dashboards that you cannot see are not returned. If value is `1`, dashboards you cannot see are returned. **Default:** 0


### List all dashboards for a project [GET]

 * `sharedWithSomeone` (optional, boolean) - Specifies whether a dashboard has been shared with a specific user.

+ Request
    + Headers

            Accept: application/json

+ Response 200

        {
          "query": {
            "entries": [
              {
                "link": "/gdc/md/{project_id}/obj/{object_id}",
                "author": "/gdc/account/profile/{profile_id}",
                "tags": "",
                "created": "2012-08-15 19:41:07",
                "deprecated": "0",
                "summary": "",
                "category": "projectDashboard",
                "title": "Overview",
                "updated": "2012-09-04 15:56:36",
                "contributor": "/gdc/account/profile/{profile_id},
                "sharedWithSomeone": 1
              }
            ],
            "meta": {
              "summary": "Metadata Query Resources for project '{project_id}'",
              "title": "List of projectdashboards",
              "category": "query"
            }
          }
        }


## /gdc/md/{project-id}/obj/{obj-id}

### Get dashboard info [GET]
Use this method to GET dashboard object content

+ Request
    + Headers

            Accept: application/json

+ Response 200

        {
            "projectDashboard": {
                "content": {
                    "filters": [],
                    "tabs": [
                        {
                            "title": "Dashboard Name",
                            "identifier": "abcdefg",
                            "items": [
                                {
                                    "reportItem": {
                                        "positionX": 410,
                                        "positionY": 0,
                                        "sizeX": 530,
                                        "sizeY": 310,
                                        "style": {
                                            "background": {
                                                "opacity": 0
                                            }
                                        },
                                        "obj": "/gdc/md/{project-id}/obj/{obj-id}",
                                        "visualization": {
                                            "oneNumber": {
                                                "labels": {}
                                            },
                                            "grid": {
                                                "columnWidths": []
                                            }
                                        },
                                        "filters": []
                                    }
                                },
                                {
                                    "headlineItem": {
                                        "positionX": 0,
                                        "positionY": 0,
                                        "sizeX": 380,
                                        "sizeY": 80,
                                        "title": "Sales",
                                        "metric": "/gdc/md/{project-id}/obj/{obj-id}",
                                        "format": "#,##0.00 Kc \n",
                                        "filters": [],
                                        "filterAttributeDF": "/gdc/md/{project-id}/obj/{obj-id}",
                                        "linkedWithExternalFilter": 0,
                                        "constraint": {
                                            "to": 0,
                                            "from": 0,
                                            "type": "floating"
                                        },
                                        "trendlineConfig": {
                                            "autoGranularity": 0,
                                            "granularityAttributeDF": "/gdc/md/{project-id}/obj/{obj-id}"
                                        }
                                    }
                                },
                                {
                                    "reportItem": {
                                        "positionX": 0,
                                        "positionY": 350,
                                        "sizeX": 940,
                                        "sizeY": 360,
                                        "style": {
                                            "background": {
                                                "opacity": 0
                                            }
                                        },
                                        "obj": "/gdc/md/{project-id}/obj/{obj-id}",
                                        "visualization": {
                                            "oneNumber": {
                                                "labels": {}
                                            },
                                            "grid": {
                                                "columnWidths": []
                                            }
                                        },
                                        "filters": []
                                    }
                                },
                                {
                                    "lineItem": {
                                        "positionX": 30,
                                        "positionY": 320,
                                        "sizeX": 880,
                                        "sizeY": 10
                                    }
                                },
                                {
                                    "lineItem": {
                                        "positionX": 390,
                                        "positionY": 0,
                                        "sizeX": 9,
                                        "sizeY": 310
                                    }
                                },
                                {
                                    "textItem": {
                                        "positionX": 100,
                                        "positionY": 130,
                                        "sizeX": 170,
                                        "sizeY": 30,
                                        "style": {
                                            "background": {
                                                "opacity": 0
                                            }
                                        },
                                        "textSize": "middle",
                                        "text": "# Customers"
                                    }
                                },
                                {
                                    "reportItem": {
                                        "positionX": 80,
                                        "positionY": 160,
                                        "sizeX": 210,
                                        "sizeY": 140,
                                        "style": {
                                            "background": {
                                                "opacity": 0
                                            }
                                        },
                                        "obj": "/gdc/md/{project-id}/obj/{obj-id}",
                                        "visualization": {
                                            "oneNumber": {
                                                "labels": {
                                                    "description": ""
                                                }
                                            },
                                            "grid": {
                                                "columnWidths": []
                                            }
                                        },
                                        "filters": []
                                    }
                                }
                            ]
                        }
                    ]
                },
                "meta": {
                    "uri": "/gdc/md/{project-id}/obj/{obj-id}",
                    "created": "2012-08-15 19:41:07",
                    "updated": "2012-09-03 16:37:57",
                    "author": "/gdc/account/profile/{user-id}",
                    "contributor": "/gdc/account/profile/{user-id}",
                    "summary": "",
                    "title": "Overview",
                    "category": "projectDashboard",
                    "tags": "",
                    "deprecated": "0",
                    "identifier": "abcdefg"
                }
            }
        }


## /gdc/md/{project-id}/obj

### Create a dashboard [POST]

+ Request
    + Headers

            Accept: application/json

    + Body

            {
                "projectDashboard": {
                    "content": {
                        "filters": [],
                        "tabs": [
                            {
                                "title": "Dashboard Name",
                                "identifier": "abcdefg",
                                "items": [
                                    {
                                        "reportItem": {
                                            "positionX": 410,
                                            "positionY": 0,
                                            "sizeX": 530,
                                            "sizeY": 310,
                                            "style": {
                                                "background": {
                                                    "opacity": 0
                                                }
                                            },
                                            "obj": "/gdc/md/{project_id}/obj/{object_id}",
                                            "visualization": {
                                                "oneNumber": {
                                                    "labels": {}
                                                },
                                                "grid": {
                                                    "columnWidths": []
                                                }
                                            },
                                            "filters": []
                                            "drills" : [
                                                {
                                                    "target" : "export",
                                                    "export": { 
                                                        "format": "csv" 
                                                    },
                                                    "definition" : {
                                                        "drillToAttributeDFs" : {
                                                            "fromAttributes" : [],
                                                            "toDisplayForms" : [
                                                                "/gdc/md/{project_id}/obj/{object_id}"
                                                            ],
                                                            "fromMetrics" : [
                                                                "/gdc/md/{project_id}/obj/{object_id}"
                                                            ]
                                                        }       
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "headlineItem": {
                                            "positionX": 0,
                                            "positionY": 0,
                                            "sizeX": 380,
                                            "sizeY": 80,
                                            "title": "Sales",
                                            "metric": "/gdc/md/{project_id}/obj/{object_id}",
                                            "format": "#,##0.00 Kc \n",
                                            "filters": [],
                                            "filterAttributeDF": "/gdc/md/{project_id}/obj/{object_id}",
                                            "linkedWithExternalFilter": 0,
                                            "constraint": {
                                                "to": 0,
                                                "from": 0,
                                                "type": "floating"
                                            },
                                            "trendlineConfig": {
                                                "autoGranularity": 0,
                                                "granularityAttributeDF": "/gdc/md/{project_id}/obj/{object_id}"
                                            }
                                        }
                                    },
                                    {
                                        "reportItem": {
                                            "positionX": 0,
                                            "positionY": 350,
                                            "sizeX": 940,
                                            "sizeY": 360,
                                            "style": {
                                                "background": {
                                                    "opacity": 0
                                                }
                                            },
                                            "obj": "/gdc/md/{project_id}/obj/{object_id}",
                                            "visualization": {
                                                "oneNumber": {
                                                    "labels": {}
                                                },
                                                "grid": {
                                                    "columnWidths": []
                                                }
                                            },
                                            "filters": []
                                        }
                                    },
                                    {
                                        "lineItem": {
                                            "positionX": 30,
                                            "positionY": 320,
                                            "sizeX": 880,
                                            "sizeY": 10
                                        }
                                    },
                                    {
                                        "lineItem": {
                                            "positionX": 390,
                                            "positionY": 0,
                                            "sizeX": 9,
                                            "sizeY": 310
                                        }
                                    },
                                    {
                                        "textItem": {
                                            "positionX": 100,
                                            "positionY": 130,
                                            "sizeX": 170,
                                            "sizeY": 30,
                                            "style": {
                                                "background": {
                                                    "opacity": 0
                                                }
                                            },
                                            "textSize": "middle",
                                            "text": "# Customers"
                                        }
                                    },
                                    {
                                        "reportItem": {
                                            "positionX": 80,
                                            "positionY": 160,
                                            "sizeX": 210,
                                            "sizeY": 140,
                                            "style": {
                                                "background": {
                                                    "opacity": 0
                                                }
                                            },
                                            "obj": "/gdc/md/{project_id}/obj/{object_id}",
                                            "visualization": {
                                                "oneNumber": {
                                                    "labels": {
                                                        "description": ""
                                                    }
                                                },
                                                "grid": {
                                                    "columnWidths": []
                                                }
                                            },
                                            "filters": []
                                        }
                                    }
                                ]
                            }
                        ]
                    },
                    "meta": {
                        "uri": "/gdc/md/{project_id}/obj/{object_id}",
                        "created": "2012-08-15 19:41:07",
                        "updated": "2012-09-03 16:37:57",
                        "author": "/gdc/account/profile/{profile_id}",
                        "contributor": "/gdc/account/profile/{profile_id}",
                        "summary": "",
                        "title": "Overview",
                        "category": "projectDashboard",
                        "tags": "",
                        "deprecated": "0",
                        "identifier": "abcdefg"
                    }
                }
            }

+ Response 200

        {
          "uri": "/gdc/md/{project_id}/obj/{object_id}"
        }


# Group User Access to Dashboards
<a id="useracesstodashboards"></a>

##  Access by dashboard - URIs [/gdc/md/{project_id}/obj/{object_id}/grantees{?permission}]


+ Parameters
    + project_id (string, required)...The ID of the project that the dashboard belongs to.
    + object_id (string, required)...The ID of dashboard that you want to view access for.
    + permission (string, optional)...Access level you want to return users for. When not specified, users with all access levels ere returned.  
    **Values:** read


### Get URIs of users who can access a dashboard [GET]

Get URIs of users who can access a dashboard.

+ Request
    + Headers

            Accept: application/json

+ Response 200

        {
            "granteeURIs": {
                "items": [
                    "aclEntryURI": {
                        "permission": "read",
                        "grantee": "/gdc/account/profile/{profile_id}"
                    },
                    "aclEntryURI": {
                        "permission": "read",
                        "grantee": "/gdc/account/profile/{profile_id}"
                    },
                ]
            }
        }
        
## Access by dashboard - user info [/gdc/projects/{project_id}/obj/{object_id}/grantees{?permission}]

+ Parameters
    + project_id (string, required)...The ID of the project that the dashboard belongs to.
    + object_id (string, required)...The ID of dashboard you want to view user access for.
    + permission (string, optional)...Type of permission you want to view user access for. When not specified, all access levels are returned.   
    **Values:** read

### Get info about users who can access a dashboard [GET]

Get basic information (status, name, email, login) about all users who can access an dashboard.

+ Request
    + Headers

            Accept: application/json

+ Response 200

        {
            "grantees": {
                "items": [
                    "aclEntry": {
                        "permission": "read",
                        "grantee": {
                            "user" : {
                                "content" : {
                                    "status" : "ENABLED",
                                    "firstname" : "John",
                                    "lastname" : "Doe",
                                    "email" : "john@doe.com",
                                    "login" : "john@doe.com"
                                },
                                "links" : {
                                    "self" : "/gdc/account/profile/{profile_id}",
                                    "roles" : "/gdc/projects/{project_id}/users/{profile_id}/roles",
                                    "permissions" : "/gdc/projects/{project_id}/users/{profile_id}/permissions",
                                    "projectRelUri" : "/gdc/projects/{project_id}/users/{profile_id}"
                                }
                            }
                        }
                    },
                    "aclEntry": {
                        "permission": "read",
                        "grantee": {
                            "user" : {
                                "content" : {
                                    "status" : "ENABLED",
                                    "firstname" : "Jane",
                                    "lastname" : "Doe",
                                    "email" : "jane@doe.com",
                                    "login" : "jane@doe.com"
                                },
                                "links" : {
                                    "self" : "/gdc/account/profile/{profile_id}",
                                    "roles" : "/gdc/projects/{project_id}/users/{profile_id}/roles",
                                    "permissions" : "/gdc/projects/{project_id}/users/{profile_id}/permissions",
                                    "projectRelUri" : "/gdc/projects/{project_id}/users/{profile_id}"
                                }
                            }
                        }
                    },
                ]
            }
        }
        
## Grant access to a dashboard [/gdc/md/{project_id}/obj/{object_id}/grantees/add]

Give a specific users access to a dashboard.

+ Parameters
    + project_id (string,required)...The ID of the project where the dashboard exists.
    + object_id (string, required)...The ID of the dashboard you want to give a user access to.

### Grant access to a dashboard for specific users [POST]

* `permission` (string, required) - The type of permission you want to give the user.  
**Values:** read
* `grantee` (URI, required) - The URI of the user who will be able to access the dashboard.

+ Request (application/json)

    + Body
    
            {
                granteeURIs: {
                    items: [
                        {
                            aclEntryURI: {
                                permission: "read",
                                grantee: "/gdc/account/profile/{profile_id}"
                            }
                        },
                        {
                            aclEntryURI: {
                                permission: "read",
                                grantee: "/gdc/account/profile/{profile_id}"
                            }
                        }
                    ]
                }
            }

+ Response 200

## Remove user access to a dashboard [/gdc/md/{project_id}/obj/{object_id}/grantees/remove]

+ Parameters
    + project_id (string,required)...The ID of the project where the dashboard exists.
    + object_id (string, required)...The ID of the dashboard where you want to remove user access.

### Remove access to a dashboard for specific users [POST]

* `permission` (string, required) - The type of permission you want to revoke.  
**Values:** read
* `grantee` (URI, required) - The URI of the user who will no longer be able to access the dashboard.

+ Request (application/json)

    + Body
    
            {
                granteeURIs: {
                    items: [
                        {
                            aclEntryURI: {
                                permission: "read",
                                grantee: "/gdc/account/profile/{profile_id}"
                            }
                        },
                        {
                            aclEntryURI: {
                                permission: "read",
                                grantee: "/gdc/account/profile/{profile_id}"
                            }
                        }
                    ]
                }
            }

+ Response 200


# Group Metadata 
<a id="metadata" ></a>
project
Following resources can be used for exporting/importing selected metadata objects. You will get the import token, that is used for import the metadata to other 
project. 

##Metadata Properties
- partialMDExport (uri) : Specifies metadata objects for export
- status (uri) : Export result URI 
- token (string) : Export token for Import usage
- overwriteNewer (boolean) : 1|0 overwrite existing objects
- updateLDMObjects (boolean) : 1|0 update logical data model objects

## Export part of a project [/gdc/md/{project_id}/maintenance/partialmdexport]

+ Parameters
  + project_id (required,string)...The ID of the project whose metadata you want to export.

### Export partial metadata [POST]

**Response**
* `status` (uri) - URI where you can poll for the status of the export.  
* `token` (string) - Token to use to import the exported metadata.

+ Request
    + Headers

            Accept: application/json

    + Body

            {
                "partialMDExport": {
                    "uris": [
                        "/gdc/md/{project_id}/obj/{obj-id}"
                    ]
                }
            }

+ Response 200

        {
            "partialMDArtifact": {
                "status": {
                    "uri": "/gdc/md/{project_id}/tasks/{task_id}/status"
                },
                "token": "TOKEN_STRING"
            }
        }

## Import part of a project [/gdc/md/{project_id}/maintenance/partialmdimport]

+ Parameters
  + project_id (required,string)...The ID of the project where you want to import metadata.

### Import partial metadata [POST]

* `token` (string, required) - The project token you want to import. This token is created during export of partial metadata.
* `overwriteNewer` (optional, boolean) - Specifies whether imported objects should overwrite newer versions of those objects.  
**Default:** 0
* `updateLDMObjects` (optional, boolean) - Specifies whether to update logical data model objects.  
**Default:** 0
* `turnOffSchedules` (optional, boolean) - Specifies whether imported scheduled emails are active. If value is 0, sending of scheduled emails continues uninterrupted. If value is 1, schedules are imported but no emails are sent until you schedule an email. When you schedule any email, all email schedules become active.  
**Default:** 0

+ Request
    + Headers

            Accept: application/json

    + Body

            { 
            "partialMDImport" : {
              "token" : "TOKEN_STRING",
               "overwriteNewer" : "1|0",
               "updateLDMObjects" : "1|0",
               "turnOffSchedules" : "1|0"
              }
            }

+ Response 200

        {
        "uri" : "/gdc/md/{project_id}/etltask/{task_id}"
        }
        
## /gdc/internal/projects/{project_id}/objects/setPermissions
### POST
This request allow you to set the object specific permissions. You need to list all objects that you want to set the permissions to, specify following options:

- "lock": true|false - specify whether the object is locked (can be edited only by Project Admin)
- "listed": true|false - specify the object visibility on UI

If you lock Dashboard, the lock will be applied also for all Reports and Metrics that are part of this dashboard.

+ Request
    + Headers

            Content-Type: application/json
            Accept: application/json

    + Body

            {
                "permissions":{
                    "lock":true,
                    "listed":true,
                    "items":[
                    "/gdc/md/{project-id}/obj/{object-id}",
                    "/gdc/md/{project-id}/obj/{object-id}"
                    ]
                }
            }

+ Response 200

            {
                "permissions": {
                    "items": [
                        "/gdc/md/{project-id}/obj/{object-id}",
                        "/gdc/md/{project-id}/obj/{object-id}"
                    ]
                }
            }


# Group Data Permissions
<a id="datapermissions" ></a>
You can use data permission (formerly Mandatory User Filters or MUFs) to filter specific data for specific user. A data permission is based on attribute value identifiers. Data permissions 
can be assigned to multiple users.

##Data Permission Properties
- userFilter : Specifies the data permission object
- expression : Defines data permission 
- category : Object category
- title : data permission title
- user (uri) : URI of user where the  was defined
- userFiltersUpdateResult : Successful/Failed permissions
- created (date) : object creation date
- updated (date) : date of last update

## /gdc/md/{project-id}/obj
### POST
Use this method to create a new data permission object.

+ Request
    + Headers

            Accept: application/json

    + Body

            {
                "userFilter": {
                    "content": {
                        "expression": "[/gdc/md/{project-id}/obj/{obj-id}]=[/gdc/md/{project-id}/obj/{obj-id}/elements?id={element-id}]"
                    },
                    "meta": {
                        "category": "userFilter",
                        "title": "User Filter Name"
                    }
                }
            }

+ Response 200

## /gdc/md/{project-id}/userfilters
### POST
Use this method to assign a data permission to a user.

+ Request
    + Headers

            Accept: application/json

    + Body

            { 
            "userFilters": {
                    "items": [
                        {
                            "user": "/gdc/account/profile/{user-id}",
                            "userFilters": [
                                "/gdc/md/{project-id}/obj/{data-permission-id}"
                            ]
                        }
                    ]
                }
            }

+ Response 200

        {
          "userFiltersUpdateResult": {
              "failed": [],
              "successful": [
                   "/gdc/account/profile/{user-id}"
                ]
            }
        }

## /gdc/md/{project-id}/query/userfilters
### GET
Use this method to get a list of data permission objects for a project.

+ Request
    + Headers

            Accept: application/json

+ Response 200

        {
            "query": {
                "entries": [
                    {
                        "link": "/gdc/md/{project-id}/obj/{data-permission-id}",
                        "author": "/gdc/account/profile/{user-id}",
                        "tags": "",
                        "created": "2012-01-16 11:08:13",
                        "deprecated": "0",
                        "summary": "",
                        "title": "User Filter Name",
                        "category": "userFilter",
                        "updated": "2012-01-16 11:08:13",
                        "contributor": "/gdc/account/profile/{user-id}"
                    }
                ],
                "meta": {
                    "summary": "Metadata Query Resources for project '{project-id}'",
                    "title": "List of userfilters",
                    "category": "query"
                }
            }
        }

## /gdc/md/{project-id}/userfilters?users={user-URI}
### GET
To list data permissions for selected users, use this API call. You can use multiple user URIs as a parameter. So that you can filter using ...userFilters={user-uri}&{user-uri}&...

+ Request
    + Headers

            Accept: application/json

+ Response 200

        {
            "userFilters": {
                "count": 20,
                "length": 1,
                "offset": 0,
                "items": [
                    {
                        "userFilters": [
                            "/gdc/md/{project-id}/obj/{obj-id}"
                        ],
                        "user": "/gdc/account/profile/{user-id}"
                    }
                ]
            }
        }

## /gdc/md/{project-id}/userfilters?userFilters={data-permission-URI}
### GET
To list Users for a specific data permission, use this API call. You can use multiple data permission URIs as a parameter. For example...userFilters={data-permission-uri}&{data-permission-uri}&...

+ Request
    + Headers

            Accept: application/json

+ Response 200

        {
            "userFilters": {
                "count": 20,
                "length": 1,
                "offset": 0,
                "items": [
                    {
                        "userFilters": [
                            "/gdc/md/{project-id}/obj/{obj-id}"
                        ],
                        "user": "/gdc/account/profile/{user-id}"
                    }
                ]
            }
        }

## /gdc/md/{project-id}/obj/{data-permission-object-id}
### DELETE
To DELETE a data permission object.

+ Request
    + Headers

            Accept: application/json

+ Response 204

# Group Dependency
<a id="dependency" ></a>
This API can be used to GET all objects that are used by specific object such as dashboard, report etc. You can specify 

- used by: to get all objects that use given object
- using: ti get all objects that are being used by given object

For example one report uses metrics and. If you pass the report object id, the API will give you a list of all objects that are being used by this report. 

## /gdc/md/{project-id}/usedby/{obj-id}
### GET
Use this method GET all objects that use your given object (specified in the request URI)

+ Request
    + Headers

            Accept: application/json

+ Response 200

        {
           "using" : {
              "edges" : [
                 {
                    "to" : 5,
                    "from" : 38
                 },
                 {
                    "to" : 49,
                    "from" : 5
                 },      
        ],
             "nodes" : [
            {
                   "link" : "/gdc/md/{project-id}/obj/{obj-id}",
                   "author" : "/gdc/account/profile/{user-id}",
                   "created" : "2011-12-22 11:04:45",
                   "deprecated" : "0",
                   "summary" : "",
                   "updated" : "2011-12-22 11:04:46",
                   "title" : "Department Salaries - Total",
                   "category" : "report",
                   "contributor" : "/gdc/account/profile/{user-id}"
                 },
        {
                   "link" : "/gdc/md/{project-id}/obj/{obj-id}",
                   "author" : "/gdc/account/profile/{user-id}",
                   "created" : "2011-12-22 11:04:45",
                   "deprecated" : "0",
                   "summary" : "",
                   "updated" : "2011-12-22 11:04:46",
                   "title" : "Department Salaries - Total",
                   "category" : "report",
                   "contributor" : "/gdc/account/profile/{user-id}"
                 }
        ]
             }
        }

## /gdc/md/{project-id}/using/{obj-id}
### GET
Use this method GET all objects that are used by specific object

+ Request
    + Headers

            Accept: application/json

+ Response 200

        {
           "using" : {
              "edges" : [
                 {
                    "to" : 5,
                    "from" : 38
                 },
                 {
                    "to" : 49,
                    "from" : 5
                 },      
        ],
             "nodes" : [
            {
                   "link" : "/gdc/md/{project-id}/obj/{obj-id}",
                   "author" : "/gdc/account/profile/{user-id}",
                   "created" : "2011-12-22 11:04:45",
                   "deprecated" : "0",
                   "summary" : "",
                   "updated" : "2011-12-22 11:04:46",
                   "title" : "Department Salaries - Total",
                   "category" : "report",
                   "contributor" : "/gdc/account/profile/{user-id}"
                 },
        {
                   "link" : "/gdc/md/{project-id}/obj/{obj-id}",
                   "author" : "/gdc/account/profile/{user-id}",
                   "created" : "2011-12-22 11:04:45",
                   "deprecated" : "0",
                   "summary" : "",
                   "updated" : "2011-12-22 11:04:46",
                   "title" : "Department Salaries - Total",
                   "category" : "report",
                   "contributor" : "/gdc/account/profile/{user-id}"
                 }
        ]
             }
        }

# Group Object Identifiers
<a id="object-identifiers" ></a>
The metadata objects are uniquely identified by the URI and Identifier. You can use this API to transform Identifiers to URI or vice versa. Identifiers doesn’t change when you clone project from master to child.

## /gdc/md/{project-id}/identifiers
### POST
Use this method transform **identifier** to **URI**. See the proper payload.

+ Request
    + Headers

            Accept: application/json

    + Body

            {
                "identifierToUri": [
                    "abcdefg"
                ]
            }

+ Response 200

        {
          "identifiers" : [
            {
              "identifier" : "abcdefg",
              "uri" : "/gdc/md/{project-id}/obj/{obj-id}"
            }
          ]
        }

# Group Reports and Dashboards by Email
<a id="report-dashboard-via-email" ></a>
Using this API, you can easily schedule the Email, that will be sent to you with a defined Reports and/or Dashboards as an attachment.

## /gdc/md/{project_id}/obj

* scaling (optional) - Specifies scaling when you export a tabular report to PDF format. Scaling applies to both landscape and portrait orientations.  

    * pageScalePercentage (optional, integer) - Specifies a percentage to scale the exported PDF. Cannot be used with other scaling keywords. **Default:** 100 
    * scaleToPages (optional, integer) - Specifies a maximum number of pages for the exported PDF. Cannot be used with other scaling keywords. 
    * scaleToPagesX (optional, integer) -  Shrinks the horizontal content of the exported PDF to a maximum of this number of pages. Often used with the scaleToPagesY keyword. Cannot be combined with the pageScalePercentage or scaleToPages keywords.
    * scaleToPagesY (optional, integer) - Shrinks the vertical content of the exported PDFs to a maximum number of pages. Often used with the scaleToPagesX keyword. Cannot be combined with the pageScalePercentage or scaleToPages keywords.

Schedule an email. Scheduled emails can include reports and dashboards as attachments.

+ Parameters
    + project_id (string,required)...The ID of the project where you want to schedule an email.

### Schedule an email [POST]

+ Request
    + Headers

            Accept: application/json

    + Body

            {
                "scheduledMail": {
                    "meta": {
                        "title": "Scheduled report example",
                        "summary": "Daily at 12:00pm PT",
                        "tags": "",
                        "deprecated": 0
                    },
                    "content": {
                        "when": {
                            "recurrency": "0:0:0:1*12:0:0",
                            "startDate": "2012-06-05",
                            "timeZone": "America/Los_Angeles"
                        },
                        "to": [
                            "email@company.com"
                        ],
                        "bcc": [
                            "secret-email@company.com"
                        ],
                        "subject": "Scheduled report",
                        "body": "Hey, I'm sending you new Reports and Dashboards!",
                        "attachments": [
                            {
                                "reportAttachment": {
                                    "uri": "/gdc/md/{project_id}/obj/{object_id}",
                                    "formats": [
                                        "pdf",
                                        "xls"
                                    ],
                                    "exportOptions":{
                                        "pageOrientation":"landscape"
                                    }
                                }
                            },
                            {
                                "dashboardAttachment":{
                                    "uri":"/gdc/md/{project_id}/obj/{dashboard_id}",
                                    "allTabs":1,
                                    "tabs":[
                                     ]
                                 }
                            },
                            {
                           "dashboardAttachment":{
                              "uri":"/gdc/md/{project_id}/obj/{dashboard_id}",
                              "allTabs":0,
                              "tabs":[
                                 "abcdefg"
                              ]
                           }
                        }                
                        ]
                    }
                }
            }

+ Response 200

        {"uri":"/gdc/md/{project_id}/obj/{object_id}"}



## /gdc/md/{project-id}/query/scheduledmails
### GET
List all scheduled emails with this request

+ Request
    + Headers

            Accept: application/json

+ Response 200

        {
            "query": {
                "entries": [
                    {
                        "link": "/gdc/md/{project-id}/obj/{obj-id}",
                        "author": "/gdc/account/profile/{user-id}",
                        "tags": "",
                        "created": "2012-06-05 15:50:25",
                        "deprecated": "0",
                        "summary": "Daily at 12:00pm PT",
                        "category": "scheduledMail",
                        "title": "Scheduled report example",
                        "updated": "2012-06-05 15:50:25",
                        "contributor": "/gdc/account/profile/{user-id}"
                    }
                ],
                "meta": {
                    "summary": "Metadata Query Resources for project '{project-id}'",
                    "title": "List of scheduledmails",
                    "category": "query"
                }
            }
        }


## Get info about a scheduled email [/gdc/md/{project_id}/obj/{object_id}]

+ Parameters
    + project_id (string,required)...The project where the scheduled email exists.
    + object_id (string,required)...The object ID of the scheduled email you want information about.

### Get info about a scheduled email [GET]



+ Request
    + Headers

            Accept: application/json

+ Response 200

             {
             "scheduledMail": {
              "content": {
            "body": "Hey, I'm sending you new Reports and Dashboards!",
            "when": {
                "timeZone": "America/Los_Angeles",
                "recurrency": "0:0:0:1*12:0:0",
                "startDate": "2012-06-05"
            },
            "attachments": [
                {
                    "reportAttachment": {
                        "exportOptions": {
                            "pageOrientation": "landscape"
                        },
                        "formats": [
                            "pdf",
                            "xls"
                        ],
                        "uri": "/gdc/md/{project_id}/obj/{report_id}"
                    }
                },
                {
                    "dashboardAttachment": {
                        "uri": "/gdc/md/{project_id}/obj/{object_id}",
                        "allTabs": 1,
                        "tabs": []
                    }
                },
                {
                    "dashboardAttachment": {
                        "uri": "/gdc/md/{project_id}/obj/{object_id}",
                        "allTabs": 0,
                        "tabs": [
                            "aydpARVaburu"
                        ]
                    }
                }
              ],
              "to": [
                "user.email@gooddata.com"
              ],
              "unsubscribed": [
                "awesome-email@company.com"
                ],
              "subject": "Scheduled report"
               },
               "meta": {
                  "author": "/gdc/account/profile/{profile_id}",
                  "uri": "/gdc/md/{project_id}/obj/{object_id}",
                  "tags": "",
                    "created": "2012-06-05 15:50:25",
                    "identifier": "abcdefg",
                 "deprecated": "0",
                 "summary": "Daily at 12:00pm PT",
                 "title": "Scheduled report example",
                    "category": "scheduledMail",
                    "updated": "2012-06-05 15:50:25",
                 "contributor": "/gdc/account/profile/{profile_id}"
                  }
              }
            }


# Group Data Loading Processes
<a id="dataloadingprocesses" ></a>

## Processes [/gdc/projects/{project-id}/dataload/processes]

### List Processes in a project [GET]

+ Request
    + Headers

            Accept: application/json

+ Response 200 (application/json)

        {
            "processes" : {
                "items" : [ {
                    "process" : {
                        "name" : "some_transformation",
                        "executables" : [ "graph/downloader.grf", "graph/gd_load.grf", "graph/jsons_parser.grf", "graph/run.grf", "graph/transform.grf" ],
                        "links" : {
                            "self" : "/gdc/projects/{project-id}/dataload/processes/{process-id}",
                            "executions" : "/gdc/projects/{project-id}/dataload/processes/{process-id}/executions"
                        }
                    }
                } ]
            }
        }

### Create new Process [POST]
Use this resource to create new data loading process. Before doing this request, you have to archive (.zip) all your CloudConnect Project files (workspace.prm...) 
and folders (graph, meta, ...) and upload the **archive** file to the WebDAV server (https://secure-di.gooddata.com/uploads/).

+ Request
    + Headers

            Accept: application/json

    + Body

            {
                "process" : {
                    "name" : "Process Name",
                    "path" : "/uploads/path-to-uploaded-process-archive.zip"
                }
            }

+ Response 201 (application/json)

        {
            "process" : {
                "name" : "Process Name",
                "executables" : [
                    "graph/simple.grf",
                    "graph/simpleNoParam.grf"
                ],
                "links" : {
                    "self" : "/gdc/projects/{project-id}/dataload/processes/{process-id}",
                    "executions" : "/gdc/{project-id}/dataload/processes/{process-id}/executions"
                }
            }
        }

### Create new Process - multipart upload [POST]
Use this resource to create new data loading process with one single multipart http request.
You have to archive (.zip) whole CloudConnect Project and send both metadata (json) and data as separated parts of the same request.

+ Request
    + Headers

            Accept: application/json
            Content-Type: multipart/form-data; boundary=boundary_string

    + Body

        --boundary_string
            Content-Disposition: form-data; name="process";
            Content-Type: application/json

            {
                "process" : {
                    "name" : "Process Name",
                }
            }

        --boundary_string
            Content-Type: application/zip
            Content-Disposition: form-data; name="data"; filename="uploaded-process-archive.zip"

            Binary data goes here.

        --boundary_string--

+ Response 201 (application/json)

        {
            "process" : {
                "name" : "Process Name",
                "executables" : [
                    "graph/simple.grf",
                    "graph/simpleNoParam.grf"
                ],
                "links" : {
                    "self" : "/gdc/projects/{project-id}/dataload/processes/{process-id}",
                    "executions" : "/gdc/{project-id}/dataload/processes/{process-id}/executions"
                }
            }
        }

## User Processes [/gdc/account/profile/{user-id}/dataload/processes]

### List Processes of the given User in all Projects [GET]

+ Request
    + Headers

            Accept: application/json

+ Response 200 (application/json)

        {
            "processes" : {
                "items" : [ {
                    "process" : {
                        "name" : "some_transformation",
                        "executables" : [ "graph/downloader.grf", "graph/gd_load.grf", "graph/jsons_parser.grf", "graph/run.grf", "graph/transform.grf" ],
                        "links" : {
                            "self" : "/gdc/projects/{project-id}/dataload/processes/{process-id}",
                            "executions" : "/gdc/projects/{project-id}/dataload/processes/{process-id}/executions"
                        }
                    }
                } ],
                "links": {
                    "self": "/gdc/account/profile/{user-id}/dataload/processes"
                }
            }
        }
        
## Process [/gdc/projects/{project-id}/dataload/processes/{process-id}]

### Get Process information [GET]

+ Request
    + Headers

            Accept: application/json
            
+ Response 201 (application/json)

        {
            "process" : {
                "name" : "name",
                "executables" : [
                    "graph/simple.grf",
                    "graph/simpleNoParam.grf"
                ],
                "links" : {
                    "self" : "/gdc/projects/{project-id}/dataload/processes/{process-id}",
                    "executions" : "/gdc/{project-id}/dataload/processes/{process-id}/executions"
                }
            }
        }

### Update Process [PUT]
The workflow to update existing data loading process is the same as when you're creating new one. This resource requires updated process archive to
be already uploaded to WebDAV.

+ Request
    + Headers

            Accept: application/json

    + Body

            {
                "process":
                {
                    "name" : "Process Name",
                    "path" : "/uploads/path-to-uploaded-process-archive.zip"
                }
            }

+ Response 201 (application/json)

        {
            "process":{
                "name" : "Process Name",
                "executables" : [
                    "graph/simple.grf",
                    "graph/simpleNoParam.grf"
                ],
                "links" : {
                    "self" : "/gdc/projects/{project-id}/dataload/processes/{process-id}",
                    "executions" : "/gdc/{project-id}/dataload/processes/{process-id}/executions"
                }
            }
        }

### Update Process - multipart upload [POST]
Use this resource update existing data loading process with one single multipart http request.
You have to archive (.zip) whole CloudConnect Project and send both metadata (json) and data as separated parts of the same request.
Note: notice the use of POST method instead of PUT - POST is the only one supported for multipart uploads.

+ Request
    + Headers

            Accept: application/json
            Content-Type: multipart/form-data; boundary=boundary_string

    + Body

        --boundary_string
            Content-Disposition: form-data; name="process";
            Content-Type: application/json

            {
                "process" : {
                    "name" : "Updated Process Name",
                }
            }

        --boundary_string
            Content-Type: application/zip
            Content-Disposition: form-data; name="data"; filename="uploaded-process-archive.zip"

            Binary data goes here.

        --boundary_string--

### Remove Process [DELETE]

+ Response 204

## Process Source [/gdc/projects/{project-id}/dataload/processes/{process-id}/source]

### Download Process archive [GET]

+ Response 303
    + Headers
    
            Location: {url-from-which-process-archive-can-be-downloaded}

## Process Executions [/gdc/projects/{project-id}/dataload/processes/{process-id}/executions{?offset,limit}]

### List Executions of a Process [GET]

+ Parameters
    
    + offset = `0`   (optional, int) ... offset of the first record
    + limit  = `100` (optional, int) ... maximal number of records

+ Request
    + Headers

            Accept: application/json
        
+ Response 200 (application/json)

        {
            "executions": {
                "paging": {
                    "offset": 0,
                    "count": 2
                },
                "items": [
                    {
                        "executionDetail": {
                            "status": "OK",
                            "created": "2014-02-27T08:25:40.327Z",
                            "started": "2014-02-27T08:25:51.490Z",
                            "updated": "2014-02-27T08:37:50.768Z",
                            "finished": "2014-02-27T08:37:50.640Z",
                            "links": {
                                "poll": "/gdc/projects/{project-id}/dataload/processes/{process-id}/executions/{execution-id}",
                                "self": "/gdc/projects/{project-id}/dataload/processes/{process-id}/executions/{execution-id}/detail",
                                "log": "/gdc/projects/{project-id}/dataload/processes/{process-id}/executions/{execution-id}/log"
                            }
                        }
                    },
                    {
                        "executionDetail": {
                            "status": "ERROR",
                            "created": "2014-02-24T19:00:35.999Z",
                            "started": "2014-02-24T19:00:39.155Z",
                            "updated": "2014-02-24T19:26:13.197Z",
                            "finished": "2014-02-24T19:26:13.060Z",
                            "error" : {
                                "errorCode" : "executor.error",
                                "message" : "Error message with some placeholders for parameters - like %s.",
                                "parameters" : [ "this one" ]
                            }
                            "links": {
                                "poll": "/gdc/projects/{project-id}/dataload/processes/{process-id}/executions/{execution-id}",
                                "self": "/gdc/projects/{project-id}/dataload/processes/{process-id}/executions/{execution-id}/detail",
                                "log": "/gdc/projects/{project-id}/dataload/processes/{process-id}/executions/{execution-id}/log",
                                "data": "/gdc/projects/{project-id}/dataload/processes/{process-id}/executions/{execution-id}/data"
                            }
                        }
                    }
                ]
            }
        }
        
### Execute Process [POST]

+ Request
    + Headers

            Accept: application/json

    + Body

            {
                "execution" : {
                    "executable" : "graph/run.grf",
                    "params" : {
                        "PARAM1" : "PARAM1_VALUE",
                        "PARAM2" : "PARAM2_VALUE"
                    },
                    "hiddenParams" : {
                        "HIDDEN_PARAM1" : "SENSITIVE_VALUE1",
                        "HIDDEN_PARAM2" : "SENSITIVE_VALUE2"
                    }
                }  
            }

+ Response 201 (application/json)
    + Headers
    
            Location: /gdc/projects/{project-id}/dataload/processes/{process-id}/executions/{execution-id}

    + Body
    
            {
                "executionTask" : {
                    "link" : {
                        "poll" : "/gdc/projects/{project-id}/dataload/processes/{process-id}/executions/{execution-id}",
                        "detail" : "/gdc/projects/{project-id}/dataload/processes/{process-id}/executions/{execution-id}/detail"
                    }
                }
            }

## Process Execution [/gdc/projects/{project-id}/dataload/processes/{process-id}/executions/{execution-id}]

### Poll for basic Execution status [GET]
Returns status code ``202 Accepted`` if execution is still running and ``204 No Content`` if it has already finished.
            
+ Response 204

+ Response 202

### Stop running Execution [DELETE]
Can be used to stop execution that's  currently in progress.
            
+ Response 204

## Process Execution Detail [/gdc/projects/{project-id}/dataload/processes/{process-id}/executions/{execution-id}/detail]

### Get Execution metadata [GET]

+ Request
    + Headers

            Accept: application/json
            
+ Response 200 (application/json)
        
        {
            "executionDetail": {
                "status": "OK",
                "created": "2014-02-27T08:25:40.327Z",
                "started": "2014-02-27T08:25:51.490Z",
                "updated": "2014-02-27T08:37:50.768Z",
                "finished": "2014-02-27T08:37:50.640Z",
                "links": {
                    "poll": "/gdc/projects/{project-id}/dataload/processes/{process-id}/executions/{execution-id}",
                    "self": "/gdc/projects/{project-id}/dataload/processes/{process-id}/executions/{execution-id}/detail",
                    "log": "/gdc/projects/{project-id}/dataload/processes/{process-id}/executions/{execution-id}/log"
                }
            }
        }

## Process Execution Log [/gdc/projects/{project-id}/dataload/processes/{process-id}/executions/{execution-id}/log]

### Get Execution log [GET]
Supports range requests that retrieve only part of execution log. If no range is given, the response status is ``200 OK`` and response body contains full log.

+ Request
    + Headers

            Accept: text/plain
            Range: 0-999

+ Response 206 (text/plain)
    + Headers
    
            Content-Length: 1000
            Content-Range: 0-999/6971

    + Body
    
            The first 1000 bytes of execution log in text/plain
            
## Process Execution Data [/gdc/projects/{project-id}/dataload/processes/{process-id}/executions/{execution-id}/data]

### Download Execution data [GET]
Allows you to download data (both executables and any locally downloaded data) of a failed execution for inspection & debugging.

+ Response 302
    + Headers
    
            Location: {url-from-which-execution-data-can-be-downloaded}


## Process Metadata [/gdc/projects/{project-id}/dataload/metadata]
This API allows you to store key-value pairs in the Project for each Project. You can use those values by calling the individual resources.

### Receive a list of metadata items [GET]

+ Response 200

    + Headers
    
            Content-Type: application/json

    + Body
    
            {
                "metadataItems": {
                     "paging": {
                          "offset": 0,
                          "count": 2
             },
                "links": {
                "self": "/gdc/projects/{project-id}/dataload/metadata"
             },
                "items": [
                {
                    "metadataItem": {
                        "key": "Key",
                        "value": "Value",
                        "links": {
                            "self": "/gdc/projects/{project-id}/dataload/metadata/Key"
                        }
                    }
                },
            {
                    "metadataItem": {
                        "key": "Name",
                        "value": "Username",
                        "links": {
                            "self": "/gdc/projects/{project-id}/dataload/metadata/Name"
                                }
                            }
                        }
                    ]
                }
            }
            
### Create and store new key-value pair [POST]

+ Request

    + Headers
    
            Content-Type: application/json
            Accept: application/json
            
    + Body
            
            {
                "metadataItem": {
                    "key": "Test",
                    "value": "Value"
                    
                }
            }
            
+ Response 201

    + Headers
    
            Content-Type: application/json

    + Body
    
            {
                "metadataItem": {
                    "key": "Test",
                    "value": "Value"
                }
            }

## Process Metadata Item [/gdc/projects/{project-id}/dataload/metadata/{key}]
Resource you can use to GET/UPDATE/DELETE individual metadata item

### Receive single metadata item [GET]

+ Response 200

    + Headers
    
            Content-Type: application/json

    + Body
    
            {
            "metadataItem": {
                "key": "Key",
                "value": "Value",
                "links": {
                    "self": "/gdc/projects/{project-id}/dataload/metadata/Key"
                         }
                }
            }
            
### Receive single metadata item [PUT]

+ Request

    + Headers
        
            Content-Type: application/json
            Accept: application/json
            
    + Body

            {
            "metadataItem": {
                "key": "Key",
                "value": "25"
                }
            }
            
+ Response 200

    + Headers
    
            Content-Type: application/json

    + Body
    
            {
            "metadataItem": {
                "key": "Key",
                "value": "25",
                "links": {
                    "self": "/gdc/projects/{project-id}/dataload/metadata/Key"
                         }
                }
            }
            
            
### Delete single metadata item [DELETE]

+ Response 204


# Group Schedules
<a id="schedules" ></a>

## Schedules [/gdc/projects/{project-id}/schedules{?offset,limit}]
### List Project Schedules [GET]

+ Parameters
    + offset = `0`   (optional, int) ... offset of the first record
    + limit  = `100` (optional, int) ... maximal number of records

+ Request
    + Headers

            Accept: application/json

+ Response 200 (application/json)

        {
            "schedules": {
                "paging": {
                    "offset": 0,
                    "count": 1
                },
                "schedulesLink": "/gdc/projects/{project-id}/schedules",
                "items": [
                    {
                        "schedule": {
                            "type": "MSETL",
                            "state": "ENABLED",
                            "params": {
                                "PROCESS_ID": "{process-id}",
                                "EXECUTABLE": "Twitter/graph/twitter.grf"
                            },
                            "cron": "0 0 * * *",
                            "timezone": "UTC",
                            "nextExecutionTime": "2013-11-16T00:00:00.000Z",
                            "lastSuccessful": {
                                "execution": {
                                    "startTime": "2013-11-15T00:00:40.355Z",
                                    "endTime": "2013-11-15T00:00:49.030Z",
                                    "log": "/gdc/projects/{project-id}/dataload/processes/{process-id}/executions/{execution-id}/log",
                                    "status": "OK",
                                    "trigger": "CRON",
                                    "links": {
                                        "self": "/gdc/projects/{project-id}/schedules/{schedule-id}/executions/{schedule-execution-id}"
                                    }
                                }
                            },
                            "lastExecution": {
                                "execution": {
                                    "startTime": "2013-11-15T00:00:40.355Z",
                                    "endTime": "2013-11-15T00:00:49.030Z",
                                    "log": "/gdc/projects/{project-id}/dataload/processes/{process-id}/executions/{execution-id}/log",
                                    "status": "OK",
                                    "trigger": "CRON",
                                    "links": {
                                        "self": "/gdc/projects/{project-id}/schedules/{schedule-id}/executions/{schedule-execution-id}"
                                    }
                                }
                            },
                            "consecutiveFailedExecutionCount": 0,
                            "links": {
                                "self": "/gdc/projects/{project-id}/schedules/{schedule-id}",
                                "executions": "/gdc/projects/{project-id}/schedules/{schedule-id}/executions"
                            }
                        }
                    }
                ]
            }
        }

### Schedule a Process [POST]
To schedule Data Loading Process. Learn more about scheduling in [following article](http://developer.gooddata.com/article/scheduling-and-notifications#cron-expression).

+ Request
    + Headers
            
            Content-Type: application/json
            Accept: application/json

    + Body

            {
                "schedule" : {
                    "type" : "MSETL",
                    "timezone" : "UTC",
                    "cron" : "0 15 27 7 *",
                    "params": {
                        "PROCESS_ID" : "{process-id}",
                        "EXECUTABLE" : "graph/run.grf",
                        "PARAM1_NAME" : "PARAM1_VALUE",
                        "PARAM2_NAME" : "PARAM2_VALUE"
                    },
                    "hiddenParams" : {
                        "HPARAM1_NAME" : "HPARAM1_VALUE",
                        "HPARAM2_NAME" : "HPARAM2_VALUE"
                    }
                }
            }

+ Response 201

## Schedule [/gdc/projects/{project-id}/schedules/{schedule-id}]

### Get Schedule [GET]

+ Request
    + Headers
    
            Accept: application/json

    + Response 200 (application/json)

            { 
                "schedule": {
                    "type": "MSETL",
                    "state": "ENABLED",
                    "params": {
                        "PROCESS_ID": "{process-id}",
                        "EXECUTABLE": "Twitter/graph/twitter.grf"
                    },
                    "cron": "0 0 * * *",
                    "timezone": "UTC",
                    "nextExecutionTime": "2013-11-16T00:00:00.000Z",
                    "lastSuccessful": {
                        "execution": {
                            "startTime": "2013-11-15T00:00:40.355Z",
                            "endTime": "2013-11-15T00:00:49.030Z",
                            "log": "/gdc/projects/{project-id}/dataload/processes/{process-id}/executions/{execution-id}/log",
                            "status": "OK",
                            "trigger": "CRON",
                            "links": {
                                "self": "/gdc/projects/{project-id}/schedules/{schedule-id}/executions/{schedule-execution-id}"
                            }
                        }
                    },
                    "lastExecution": {
                        "execution": {
                            "startTime": "2013-11-15T00:00:40.355Z",
                            "endTime": "2013-11-15T00:00:49.030Z",
                            "log": "/gdc/projects/{project-id}/dataload/processes/{process-id}/executions/{execution-id}/log",
                            "status": "OK",
                            "trigger": "CRON",
                            "links": {
                                "self": "/gdc/projects/{project-id}/schedules/{schedule-id}/executions/{schedule-execution-id}"
                            }
                        }
                    },
                    "consecutiveFailedExecutionCount": 0,
                    "links": {
                        "self": "/gdc/projects/{project-id}/schedules/{schedule-id}",
                        "executions": "/gdc/projects/{project-id}/schedules/{schedule-id}/executions"
                    }
                }
            }

### Update Schedule [PUT]

+ Request
    + Headers

            Content-Type: application/json
            Accept: application/json

    + Body

            {
                "schedule" : {
                    "type" : "MSETL",
                    "timezone" : "UTC",
                    "cron" : "0 15 27 7 *",
                    "params": {
                        "PROCESS_ID" : "{process-id}",
                        "EXECUTABLE" : "graph/run.grf",
                        "PARAM1_NAME" : "PARAM1_VALUE",
                        "PARAM2_NAME" : "PARAM2_VALUE"
                    },
                    "hiddenParams" : {
                        "HPARAM1_NAME" : "HPARAM1_VALUE",
                        "HPARAM2_NAME" : "HPARAM2_VALUE"
                    }
                }
            }

+ Response 200 (application/json)

        { 
            "schedule": {
                "type": "MSETL",
                "state": "ENABLED",
                "params": {
                    "PROCESS_ID" : "{process-id}",
                    "EXECUTABLE" : "graph/run.grf",
                    "PARAM1_NAME" : "PARAM1_VALUE",
                    "PARAM2_NAME" : "PARAM2_VALUE"
                },
                "cron": "0 15 27 7 *",
                "timezone": "UTC",
                "nextExecutionTime": "2013-11-16T00:00:00.000Z",
                "lastSuccessful": {
                    "execution": {
                        "startTime": "2013-11-15T00:00:40.355Z",
                        "endTime": "2013-11-15T00:00:49.030Z",
                        "log": "/gdc/projects/{project-id}/dataload/processes/{process-id}/executions/{execution-id}/log",
                        "status": "OK",
                        "trigger": "CRON",
                        "links": {
                            "self": "/gdc/projects/{project-id}/schedules/{schedule-id}/executions/{schedule-execution-id}"
                        }
                    }
                },
                "lastExecution": {
                    "execution": {
                        "startTime": "2013-11-15T00:00:40.355Z",
                        "endTime": "2013-11-15T00:00:49.030Z",
                        "log": "/gdc/projects/{project-id}/dataload/processes/{process-id}/executions/{execution-id}/log",
                        "status": "OK",
                        "trigger": "CRON",
                        "links": {
                            "self": "/gdc/projects/{project-id}/schedules/{schedule-id}/executions/{schedule-execution-id}"
                        }
                    }
                },
                "consecutiveFailedExecutionCount": 0,
                "links": {
                    "self": "/gdc/projects/{project-id}/schedules/{schedule-id}",
                    "executions": "/gdc/projects/{project-id}/schedules/{schedule-id}/executions"
                }
            }
        }

## Schedule Executions [/gdc/projects/{project-id}/schedules/{schedule-id}/executions{?offset,limit}]

### List Schedule Executions [GET]

+ Parameters
    + offset = `0`   (optional, int) ... offset of the first record
    + limit  = `100` (optional, int) ... maximal number of records

+ Request
    + Headers

            Accept: application/json

+ Response 200 (application/json)

        {
            "executions": {
                "paging": {
                    "offset": 0,
                    "count": 2,
                    "next": "/gdc/projects/{project-id}/schedules/{schedule-id}/executions?offset=2&limit=2"
                },
                "items": [
                    {
                        "execution": {
                            "startTime": "2014-03-02T16:00:21.093Z",
                            "endTime": "2014-03-02T16:00:24.460Z",
                            "log": "/gdc/projects/{project-id}/dataload/processes/{process-id}/executions/{schedule-execution-id}/log",
                            "status": "OK",
                            "trigger": "CRON",
                            "links": {
                                "self": "/gdc/projects/{project-id}/schedules/{schedule-id}/executions/{schedule-execution-id}"
                            },
                            "createdTime": "2014-03-02T16:00:18.963Z"
                        }
                    },
                    {
                        "execution": {
                            "startTime": "2014-03-02T15:00:20.184Z",
                            "endTime": "2014-03-02T15:00:23.320Z",
                            "log": "/gdc/projects/{project-id}/dataload/processes/{process-id}/executions/{execution-id}/log",
                            "status": "OK",
                            "trigger": "CRON",
                            "links": {
                                "self": "/gdc/projects/{project-id}/schedules/{schedule-id}/executions/{execution-id}"
                            },
                            "createdTime": "2014-03-02T15:00:18.410Z"
                        }
                    }
                ]
            }
        }

### Execute Schedule [POST]
``Schedule`` will be placed in execution queue and will **run as soon as possible**.

+ Request
    + Headers

            Content-Type: application/json
            Accept: application/json

    + Body

            {
                "execution": {}
            }

+ Response 200 (application/json)

        {
            "execution": {
                "status": "SCHEDULED",
                "trigger": "MANUAL",
                "links": {
                    "self": "/gdc/projects/{project-id}/schedules/{schedule-id}/executions/{schedule-execution-id}"
                }
            }
        }

### Delete Schedule [DELETE]

+ Response 204

## Schedule Execution [/gdc/projects/{project-id}/schedules/{schedule-id}/execution]

### Get Execution [GET]

+ Request
    + Headers

            Accept: application/json

+ Response 200 (application/json)

        {
            "execution": {
                "startTime": "2014-03-02T15:00:20.184Z",
                "endTime": "2014-03-02T15:00:23.320Z",
                "log": "/gdc/projects/{project-id}/dataload/processes/{process-id}/executions/{execution-id}/log",
                "status": "OK",
                "trigger": "CRON",
                "links": {
                    "self": "/gdc/projects/{project-id}/schedules/{schedule-id}/executions/{execution-id}"
                },
                "createdTime": "2014-03-02T15:00:18.410Z"
            }
        }


# Group CloudConnect Notifications

<a id="cloudconnectnotifications" ></a>

## List or create a CloudConnect notification [/gdc/projects/{project_id}/dataload/processes/{process_id}/notificationRules]

CloudConnect notifications generate an email when a CC event, such as a data loading process failure, occurs. You set notifications for the scheduling, starting, successful completion, and unsuccessful completion of loading processes.
 

+ Parameters
    + project_id (string,required)...The ID of the project where the process you want notifications about resides.
    + process_id (string,required)...The ID of the process you want to list or create notifications for.

 
### List all CC notifications for a process [GET]

**Response:**

* `email` - The email address that generated emails are sent to. Specify only one email address per notification.
* `subject` - The subject of the generated email.
* `body` - The body of the generated email.
* `events` -  The IDs of events that trigger the notification. 
* `self` - The URI of this notification rule.
* `subscription` - The URI of the email notification subscription.
* `channel` - The URI of the email channel associated with this rule. This channel is created when you create the subscription.

+ Request (application/json)
    

    + Body

            
+ Response 200 (application/json)
           
    + Body

            {
            "notificationRules" : {
                "items" : [ {
                    "notificationRule": {
                        "email": "kurt@yourock.com",
                        "subject": "Your rockin' notification",
                        "body": "The body text included in the generated email. Rock on.",
                        "events": [
                           "process.start",
                           "process.end"
                         ],
                         "links" : {
                            "self" : "/gdc/projects/{project_id}/dataload/processes/{process_id}/notificationRules/{rule_id}",
                            "subscription" : "/gdc/projects/{project_id}/users/{user_id}/subscriptions/{subscription_id}",
                            "channels" : [ "/gdc/account/profile/{profile_id}/channelConfigurations/{channel_id}" ]
                        }
                    }
                }, 
                {                             
                    "notificationRule": {
                        "email": "wolfie@salzburg.com",
                        "subject": "symphony sales figures",
                        "body": "This month's symphony sales figures.",
                        "events": [
                            "process.start",
                            "process.end"
                        ],
                        "links" : {
                            "self" : "/gdc/projects/{project_id}/dataload/processes/{process_id}/notificationRules/{rule_id}",
                            "subscription" : "/gdc/projects/{project_id}/users/{user_id}/subscriptions/{subscription_id}",
                            "channels" : [ "/gdc/account/profile/{profile_id}/channelConfigurations/{channel_id}" ]
                        }
                    }
                }],
                "links" : {
                    "self" : "/gdc/projects/{project_id}/dataload/processes/{process_id}/notificationRules"
                 }
            }


### Create a CC notification [POST] 

* `email` (required, string) - The email address generated emails are sent to. Specify only one email address per notification.
* `subject` (required, string) - The subject of the generated email.
* `body` (required, string) - The body of the generated email.
* `events` (required, array) -  The IDs of events that trigger the notification. Specify at least one.  
**Values:**  `dataload.process.schedule`, `dataload.process.start`, `dataload.process.finish.ok`, `dataload.process.finish.error`


+ Request (application/json)

    + Headers
    
            Accept: application/json

    + Body

              {
                "notificationRule": {
                    "email": "kurt@yourock.com",
                    "subject": "Your rockin' notification",
                    "body": "The body text included in the generated email. Rock on.",
                    "events": [
                        "process.start",
                        "process.end"
                    ]
                }
          
          
            
+ Response 200 (application/json)


           
    + Body
    

## Manage a CloudConnect notification [/gdc/projects/{project_id}/dataload/processes/{process_id}/notificationRules/{notification_id}]

Manage a specific CloudConnect email notification.
 
+ Parameters
    + project_id (string,required)...The ID of the project where the process you want notifications about resides.
    + process_id (string,required)...The ID of the process you want to list or create notifications.
    + notification_id (string,required)...The ID of the notification you want to manage.
    
 
### Get info about a CC notification [GET]

**Response:**

* `email` - The email address generated emails are sent to.
* `subject` - The subject of the generated email.
* `body` - The body of the generated email.
* `events` -  The IDs of events that trigger the notification.
* `self` - The URI to this notification rule.
* `subscription` - The URI of email notification subscription.
* `channel` - The URI of the associated email channel. This channel is created when you create the subscription.

+ Request (application/json)

    + Headers
    
            Accept: application/json

    + Body



            
+ Response 200 (application/json)


           
    + Body

                  {
                "notificationRule": {
                    "email": "kurt@yourock.com",
                    "subject": "Your rockin' notification",
                    "body": "The body text included in the generated email. Rock on.",
                    "events": [
                        "process.start",
                        "process.end"
                    ]
                    "links" : {
                            "self" : "/gdc/projects/{project_id}/dataload/processes/{process_id}/notificationRules/{rule_id}",
                            "subscription" : "/gdc/projects/{project_id}/users/{user_id}/subscriptions/{subscription_id}",
                            "channels" : [ "/gdc/account/profile/{profile_id}/channelConfigurations/{channel_id}" ]
                    }
                }


### Update a CC notification [POST] 

* `email` (required, string) - The email address that generated emails are sent to. Specify only one email address per subscription.
* `subject` (required, string) - The subject of the generated email.
* `body` (required, string) - The body of the generated email.
* `events` (required, array) -  The IDs of events that trigger the notification. Specify at least one.  
**Values:**  `dataload.process.schedule`, `dataload.process.start`, `dataload.process.finish.ok`, `dataload.process.finish.error`


+ Request (application/json)

    + Headers
    
            Accept: application/json

    + Body

                  {
                "notificationRule": {
                    "email": "kurt@yourock.com",
                    "subject": "The rock stops here",
                    "body": "New email body text. You don't rock, dude.",
                    "events": [
                        "process.start",
                        "process.end"
                    ]
                }

            
+ Response 200 (application/json)

           
    + Body

    
### Delete a CC notification [DELETE]

+ Request (application/json)

    + Headers
    
            Accept: application/json

    + Body

            
+ Response 204 (application/json)

           
    + Body

# Group CloudConnect Google Analytics Connector
<a id="cc-google-analytics" ></a>
### Download task properties
* credentials
    * username - GA user name
    * password - GA user password
* definition
    * ids - unique table ID, format: ga:XXXX (where XXXX is the Analytics profile ID), required field
    * start date - first date for which user requests data, format: YYYY-MM-DD, required field
    * end date - last date for which user requests data, format: YYYY-MM-DD, required field
    * metrics - list of comma-separated metrics, required field
    * dimensions - list of comma-separated dimensions
    * filters - dimension and metric filters that restricts data returned for user request
    * segment - segments the data for user's request

## /gdc/projects/{project-id}/dataload/download/googleanalytics/downloadTasks
### POST
Create download task

+ Request
    + Headers

            Accept: application/json

    + Body

            {
                "googleAnalyticsDownloadTask": {
                    "credentials": {
                        "username": "John Doe",
                        "password": "123abc"
                    },
                    "definition": {
                        "ids": "ga:123abc",
                        "startDate":"2012-01-01",
                        "endDate": "2012-02-02",
                        "metrics": ["ga:metric1","ga:metric2"],
                        "dimensions": ["ga:dimension1", "ga:dimension2"],
                        "filters": ["ga:filter1", "ga:filter2"],
                        "segment": "sampleSegment"
                    }
                }
            }

+ Response 201

        {
            "asyncTask": {
                "link": {
                    "poll": "/gdc/projects/{project-id}/dataload/download/googleanalytics/downloadTasks/{task-id}"
                }
            }
        }

## /gdc/projects/{project-id}/dataload/download/googleanalytics/downloadTasks/{task-id}
### GET
Get download task (running)

+ Request
    + Headers

            Accept: application/json

+ Response 202

# Group Facebook tokens refreshing
<a id="cc-facebook-tokens" ></a>
In order to call the Facebook Graph API, it is necessary to have a
valid OAuth 2.0 token, which is valid for 60 days only after it has
been issued. The purpose of this API is the (per project)  management
of such Facebook tokens, as well as sending notifications to the user
when the token to his account is about to expire.

## /gdc/projects/{project-id}/dataload/download/facebook/tokens
### POST
Using this request, you can create a new Facebook token request

+ Request
    + Headers

            Accept: application/json

    + Body

            {
              "facebookToken": {
                "email": "example@example.com",
                "applicationId": "123456",
                "applicationSecret": "1234567890",
                "notificationsEnabled": true,
                "label": "Facebook account A",
                "scope": ["privilegie_A"]
              }
            }

+ Response 201

        {"uri":"/gdc/projects/{project-id}/dataload/download/facebook/tokens/{token-id}"}

### GET
Obtain all Facebook tokens for a particular project

+ Response 200

        {
          "facebookTokens" : {
            "items" : [
              "/gdc/projects/{project-id}/dataload/download/facebook/tokens/{token-id}",
              "/gdc/projects/{project-id}/dataload/download/facebook/tokens/{token-id}" ]
          }
        }

## /gdc/projects/{project-id}/dataload/download/facebook/tokens/{token-id}
### GET
Obtain a specific Facebook token

+ Response 200

        {
          "facebookToken" : {
            "id" : "/gdc/projects/{project-id}/dataload/download/facebook/tokens/{token-id}",
            "email" : "example@example.com",
            "label" : "Facebook account A",
            "facebookAccountId" : "xxffaa5",
            "applicationId" : "123456",
            "issued" : "2013-05-09T11:37:32.778Z",
            "expired" : null,
            "token" : "Some token issued by Facebook",
            "notificationsEnabled" : true,
            "state" : "LONGLIVED",
            "scope" : [ ]
          }
        }

### PUT
Update a Facebook token

+ Request
    + Headers

            Accept: application/json

    + Body

            {
              "facebookToken": {
                "email": "example@example.com",
                "notificationsEnabled": false,
                "label": "Facebook account B"
               }
            }

+ Response 204

### DELETE
Delete a facebook token

+ Response 204

# Group Zendesk Connector
<a id="cc-zendesk" ></a>
Following resources are related to the Zendesk integration connector.

## /gdc/projects/{project_id}/connectors/zendesk3/integration
### POST
Create new integration by this request

+ Request
    + Headers

            Accept: application/json

    + Body

            {
                "integration": {
                    "projectTemplate": "/projectTemplates/ZendeskAnalytics/9",
                    "active": true | false
                }
            }

+ Response 201

### GET
This Resource gives you existing integration 

+ Request
    + Headers

            Accept: application/json

+ Response 200

        {
          "integration" : {
            "projectTemplate" : "/projectTemplates/ZendeskAnalytics/9",
            "active" : false,
            "lastFinishedProcess" : null,
            "lastSuccessfulProcess" : null,
            "runningProcess" : null,
            "links" : {
              "self" : "/gdc/projects/{project-id}/connectors/zendesk3/integration",
              "processes" : "/gdc/projects/{project-id}/connectors/zendesk3/integration/processes",
              "config" : "/gdc/projects/{project-id}/connectors/zendesk3/integration/config"
            },
            "ui" : { }
          }
        }

### PUT
To update the existing integration

+ Request
    + Headers

            Accept: application/json

    + Body

            {
              "integration" : {
                "projectTemplate" : "/projectTemplates/ZendeskAnalytics/9",
                "active" : false,
                "lastFinishedProcess" : null,
                "lastSuccessfulProcess" : null,
                "runningProcess" : null,
                "links" : {
                  "self" : "/gdc/projects/{project-id}/connectors/zendesk3/integration",
                  "processes" : "/gdc/projects/{project-id}/connectors/zendesk3/integration/processes",
                  "config" : "/gdc/projects/{project-id}/connectors/zendesk3/integration/config"
                },
                "ui" : { }
              }
            }

+ Response 200

### DELETE
To delete the existing integration

+ Request
    + Headers

            Accept: application/json

+ Response 204

## /gdc/gdc/projects/{project_id}/connectors/zendesk3/integration/config
### GET
To get the navigation structure for existing integration

+ Request
    + Headers

            Accept: application/json

+ Response 200

        {
          "config" : {
            "settingsLink" : "/gdc/projects/{project-id}/connectors/zendesk3/integration/config/settings"
          }
        }

## /gdc/projects/{project_id}/connectors/zendesk3/integration/config/settings
### GET
To get the config for existing integration

+ Request
    + Headers

            Accept: application/json

+ Response 200

        {
          "settings" : {
            "apiUrl" : null,
            "syncTime" : "12am",
            "syncTimeZone" : "America/Los_Angeles",
            "type" : "plus",
            "enterpriseLoadInterval" : 60
          }
        }

### PUT
To update the config for existing integration  
- **apiURL**: Zendesk API endpoint 

+ Request
    + Headers

            Accept: application/json

    + Body

            {
              "settings" : {
                "apiUrl" : null,
                "syncTime" : "12am",
                "syncTimeZone" : "America/Los_Angeles",
                "type" : "plus",
                "enterpriseLoadInterval" : 60
              }
            }

+ Response 204

## /gdc/projects/{project_id}/connectors/zendesk3/integration/processes
### POST
To create new integration process

+ Request
    + Headers

            Accept: application/json

    + Body

            {
                "process": {
                    "startDate": "ISO-DATE-TIME",
                    "incremental": "true | false",
                    "enforceCustomFieldsSync": "true | false"
                }
            }

+ Response 201

# Group Zendesk 4 Connector
<a id="zendesk4connector"></a>

## /gdc/projects/{projectName}/connectors/zendesk4/integration
### POST
Create integration resource

+ Request
    + Headers
    
            Accept: application/json
            Content-Type: application/json

    + Body
    
            {
                "integration" : {
                    "projectTemplate" : "/projectTemplates/ZendeskAnalytics/10",
                    "active" : true
                }
            }

+ Response 201
    + Body
    
            {
                "integration" : {
                    "projectTemplate" : "/projectTemplates/ZendeskAnalytics/10",
                    "active" : true,
                    "lastFinishedProcess" : null,
                    "lastSuccessfulProcess" : null,
                    "runningProcess" : null,
                    "links" : {
                        "self" : "/gdc/projects/{project-id}/connectors/zendesk4/integration",
                        "processes" : "/gdc/projects/{project-id}/connectors/zendesk4/integration/processes",
                        "settings" : "/gdc/projects/{project-id}/connectors/zendesk4/integration/settings",
                    },
                    "ui" : { }
                }
            }

        
### GET
Retrieve integration resource

+ Request
    + Headers
    
            Accept: application/json

+ Response 200

    + Body
    
            {
                "integration" : {
                    "projectTemplate" : "/projectTemplates/ZendeskAnalytics/10",
                    "active" : true,
                    "lastFinishedProcess" : null,
                    "lastSuccessfulProcess" : null,
                    "runningProcess" : null,
                    "links" : {
                        "self" : "/gdc/projects/{project-id}/connectors/zendesk4/integration",
                        "processes" : "/gdc/projects/{project-id}/connectors/zendesk4/integration/processes",
                        "settings" : "/gdc/projects/{project-id}/connectors/zendesk4/integration/settings"
                    },
                    "ui" : { }
                }
            }
        
### PUT
Update integration resource

+ Request
    + Headers
    
            Accept: application/json
            Content-Type: application/json

    + Body
    
            {
                "integration" : {
                    "projectTemplate" : "/projectTemplates/ZendeskAnalytics/10",
                    "active" : true
                }
            }

+ Response 200
    + Body
    
            {
                "integration" : {
                    "projectTemplate" : "/projectTemplates/ZendeskAnalytics/10",
                    "active" : true,
                    "lastFinishedProcess" : null,
                    "lastSuccessfulProcess" : null,
                    "runningProcess" : null,
                    "links" : {
                        "self" : "/gdc/projects/{project-id}/connectors/zendesk4/integration",
                        "processes" : "/gdc/projects/{project-id}/connectors/zendesk4/integration/processes",
                        "settings" : "/gdc/projects/{project-id}/connectors/zendesk4/integration/settings",
                    },
                    "ui" : { }
                }
            }

## /gdc/projects/{projectName}/connectors/zendesk4/integration/processes
### POST
Create integration process

+ Request
    + Headers
    
            Accept: application/json
            Content-Type: application/json

    + Body
    
            {
                "process" : {}
            }
            
            {
                "process" : {
                    "ticketsStartDate": "2014-03-11T23:42:53.630Z",
                    "organizationsStartDate": "2014-03-11T23:42:53.630Z",
                    "usersStartDate": "2014-03-11T23:42:53.630Z",
                    "ticketEventsStartDate": "2014-03-11T23:42:53.630Z",
                    "incremental": true
                }
            }
            

+ Response 201

    + Body
    
            {
                "uri": "/gdc/projects/{project-id}/connectors/zendesk4/integration/processes/{process-id}"
            }

## /gdc/projects/{projectName}/connectors/zendesk4/integration/settings
### GET
Retrieve integration settings

+ Request
    + Headers
    
            Accept: application/json


+ Response 200
    + Headers
    
            Content-Type: application/json

    + Body
    
            {
                "settings": {
                    "apiUrl": "https://somedomain.zendesk.com",
                    "syncTime": "10am",
                    "syncTimeZone": "Europe/Prague",
                    "type": "plus"
                }
            }
            
            {
                "settings": {
                    "apiUrl": "https://somedomain.zendesk.com",
                    "type": "enterprise"
                }
            }
            
            
### PUT
Update integration settings

+ Request
    + Headers
    
            Accept: application/json
            Content-Type: application/json

    + Body
            
            {
                "settings": {
                    "apiUrl": "https://somedomain.zendesk.com"
                }
            }
          
+ Response 204


# Group White Labeling
<a id="white-labeling" ></a>
Organization administrators and owners can use the following resources to customize the appearance of their organzations. 

**Note:** You must set up set up a CNAME and acquire an SSL certificate before you can white label your organization. This can take up to two weeks. For more information on setting this up, see the <a href="http://help.gooddata.com/doc/public/wh/WHAll/Default.htm#local/WhiteLabeling.htm">Online Help sections on White Labeling</a>.


## Manage white labeling [/gdc/organizations/{organization_name}/settings]

* `noReplyEmail` (required, string) - Email address that scheduled reports are sent from
* `registrationEmail` (required, string) - Email address that registration confirmation emails and forgotten password emails are sent from.
* `invitationEmail` (required, string) - Email address that project invitation emails are sent from.
* `bccEmail` (required, string) - Email address that is blind copied on invitation emails.
* `supportEmail` (required, string) - (mailSettings section) Email address that emails to support are sent to. Also appears in the body of some emails.
* `supportPhone` (required, string) - Phone number for reaching customer support. This phone number appears in email templates.
* `applicationTitle` (required, string, `<My Company> Analytics`) - Text in the browser title bar, or tab title. 
* `faviconUrl` (optional, fully qualified or relative URL) - Image that appears in the browser address bar. **Format:** 16 x 16, 32 x 32, 48 x 48, or 64 x 64 px; ICO 
* `orgnizationName` (required, string, `GoodData Corporation`) - Name of the organization on the GoodData platform. This value is used in the copyright text and in the body of emails generated by the Portal.
* `displayFlashNews` (required, boolean) - Specify whether to display status bar that appears on Portal after a new GoodData platform release. This status bar links to information published by GoodData. Can be disabled.
* `logoUrl` (required, fully qualified or relative URL) - Logo displayed in the top-left corner of the Portal. **Format:** 120px x 25 px, PNG
* `displayProjects` (required, boolean) - Specify whether users can select projects on the project picker menu located in Account > Active Projects. Can be disabled.
* `displayAccountPage` (required, boolean) - Specify whether users can review their account details on the Account menu. Can be disabled.
* `supportEmail`(optional, string) - (portalSettings section) Email that tickets are sent to when users click Help > Submit Ticket. Can be disabled.
* `supportForumUrl` (optional, fully qualified or relative URL) - URL that users are directed to when they click Help > Visit Support, or Help in the dashboard footer. Can be disabled.
* `privacyPolicyUrl` (optional, fully qualified or relative URL) - URL that users are directed to when they click Privacy Policy in the Portal footer, or Account > Personal Information > privacy policy. Can be disabled.
* `documentationUrl` (optional, fully qualified or relative URL) - URL that users are directed to when they click Help in the Portal footer, or click Help > Documentation. Can be disabled.
* `securityStatmentUrl` (optional, fully qualified or relative URL) - URL that users are directed to when they click Security Statement in the Portal footer. Can be disabled.
* `termsofUseUrl` (optional, fully qualified or relative URL) - URL that users are directed to when they click Terms of Use in the Portal footer. Can be disabled.
* `trustUrl` (optional, fully qualified or relative URL) - URL that users are directed to when they click Trust in the Portal footer. Can be disabled.
* `appleTouchIconUrl` (optional, fully qualified or relative URL) - The desktop icon that iOS users see when they save a GoodData page to desktop. Provide a link to this icon. **Format:** 114 x 114px, PNG
* `applicationBackgroundColor` (optional, HTML color code in hex) - Custom background color for the dashboard. This color is not applied to the login, logout, registration, invitation or confirmation pages. If you specify both a dashboard image and a color, the image is displayed on top of the background color.
* `hideRegistration` (optional, boolean) - Hide the link to the registration form on the Login page. This stops users from registering without being invited.
* `largeLogoUrl` (optional, fully qualified or relative URL) - Logo that appears on the Login and Registration pages. **Format:** 130px maximum height, 470px maximum width, PNG preferred
* `brandColor` (optional, HTML color code in hex) - Narrow strip of color on the top of the Login and Registration pages.
* `headerColor` (optional, HTML color code in hex) - Custom color for the dashboard header.
* `activeColor` (optional, HTML color code in hex) - Custom underline color on active navigation elements.
* `headerTextColor` (optional, HTML color code in hex) - Custom color for the text on the dashboard header.

+ Parameters
    + organization_name (string,required)...The name of the organization where white labeling is applied.
    

### Retrieve white labeling settings [GET]

+ Request
    + Headers

            Accept: application/json

+ Response 200


        {
            "settings":{
                "mailSettings":{
                    "noReplyEmail":"1noreply@example.com",
                    "registrationEmail":"2reg@example.com",
                    "invitationEmail":"3inv@example.com",
                    "bccEmail":"4bcc@example.com",
                    "supportEmail":"5support@example.com",
                    "supportPhone":"+420 123 456 789"
                },
                "portalSettings":{
                    "applicationTitle":"Custom analytics",
                    "faviconUrl":"/favicon",
                    "organizationName":"My organization",
                    "displayFlashNews":false,
                    "logoUrl":"http://www.website.com/mynewlogo.jpg",
                    "displayProjects":false,
                    "displayAccountPage":true,
                    "supportEmail":"support@example.com",
                    "supportForumUrl":"/link/to/support/forums",
                    "privacyPolicyUrl":"/privacyPolicy",
                    "documentationUrl":"/help/link",
                    "securityStatementUrl":"/security",
                    "termsOfUseUrl":"/tos",
                    "trustUrl":"/trust",
                    "appleTouchIconUrl":"/icon.png",
                    "applicationBackgroundColor":"#999",
                    "hideRegistration":"true | false",
                    "largeLogoUrl":"http://www.website.com/largelogo.jpg",
                    "brandColor":"#999",
                    "headerColor":"#FF0040", 
                    "activeColor":"#F7FE2E",
                    "headerTextColor":"#610B38"
                  }
             }
        }



### Update white labeling settings [PUT]


+ Request
    + Headers

            Accept: application/json

    + Body


            {
                "settings":{
                    "mailSettings":{
                        "noReplyEmail":"1noreply@example.com",
                        "registrationEmail":"2reg@example.com",
                        "invitationEmail":"3inv@example.com",
                        "bccEmail":"4bcc@example.com",
                        "supportEmail":"5support@example.com",
                        "supportPhone":"+420 123 456 789"
                    },
                    "portalSettings":{
                        "applicationTitle":"Custom analytics",
                        "faviconUrl":"/favicon",
                        "organizationName":"My organization",
                        "displayFlashNews":false,
                        "logoUrl":"http://www.website.com/mynewlogo.jpg",
                        "displayProjects":false,
                        "displayAccountPage":true,
                        "supportEmail":"support@example.com",
                        "supportForumUrl":"/link/to/support/forums",
                        "privacyPolicyUrl":"/privacyPolicy",
                        "documentationUrl":"/help/link",
                        "securityStatementUrl":"/security",
                        "termsOfUseUrl":"/tos",
                        "trustUrl":"/trust",
                        "appleTouchIconUrl":"/icon.png",
                        "applicationBackgroundColor":"#999",
                        "hideRegistration":"true | false",
                        "largeLogoUrl":"http://www.website.com/largelogo.jpg",
                        "brandColor":"#999",
                        "headerColor":"#FF0040", 
                        "activeColor":"#F7FE2E",
                        "headerTextColor":"#610B38"
                      }
                 }
            }



+ Response 204




# Group Data Warehouse

<a id="datawarehouse" ></a>

<!--- former called "Agile Data Warehousing Service" -->
<a id="ads"></a>
The Agile Data Warehousing service is fully hosted by GoodData. 

## List DWs or create a DW [/gdc/datawarehouse/instances]
### List DW instances [GET]

+ Request 
      
    + Headers
          
            Accept: application/json

+ Response 200 (application/json)
     
    + Headers
    
            Accept: application/json

    + Body

            {
              "instances" : {
                "items" : [ {
                  "instance" : {
                    "title" : "Storage",
                    "description" : "Testing Storage",
                    "status" : "ENABLED",
                    "authorizationToken" : “token",
                    "created" : "2014-03-17T13:02:39.000Z",
                    "updated" : "2014-03-17T13:02:41.000Z",
                    "createdBy" : "/gdc/account/profile/{profile_id}",
                    "updatedBy" : "/gdc/account/profile/{profile_id}",
                    "links" : {
                      "self" : "/gdc/datawarehouse/instances/{instance_id}",
                      "parent" : "/gdc/datawarehouse/instances",
                      "users" : "/gdc/datawarehouse/instances/{instance_id}/users",
                      "schemas" : "/gdc/datawarehouse/instances/{instance_id}/schemas",
                      "jdbc" : "/gdc/datawarehouse/instances/{instance_id}/jdbc"
                    }
                  }
                }, {
                  "instance" : {
                    "title" : "Salesforce",
                    "description" : "Test",
                    "status" : "ENABLED",
                    "authorizationToken" : “token",
                    "created" : "2014-04-09T22:10:26.000Z",
                    "updated" : "2014-04-09T22:10:26.000Z",
                    "createdBy" : "/gdc/account/profile/{profile_id}",
                    "updatedBy" : "/gdc/account/profile/{profile_id}",
                    "links" : {
                      "self" : "/gdc/datawarehouse/instances/{instance_id}",
                      "parent" : "/gdc/datawarehouse/instances",
                      "users" : "/gdc/datawarehouse/instances/{instance_id}/users",
                      "schemas" : "/gdc/datawarehouse/instances/{instance_id}/schemas",
                      "jdbc" : "/gdc/datawarehouse/instances/{instance_id}/jdbc"
                    }
                  }
                } ],
                "links" : {
                  "parent" : "/gdc/datawarehouse",
                  "self" : "/gdc/datawarehouse/instances"
                }
              }
            }


### Create a data warehouse [POST]
> **NOTE:** You must have a data warehouse token to create a data warehouse instance.

+ Request 
      
     + Headers
          
            Content-Type: application/json
            Accept: application/json

     + Body

              {
                "instance": {
                    "title": "New Data Warehouse",
                    "authorizationToken": "Your-DW-Token",
                    "description": "DW Description"
                }
                }

+ Response 202 (application/json)
     
     + Headers

            Accept: application/json     

     + Body

                     {
              "asyncTask" : {
                "links" : {
                  "poll" : "/gdc/datawarehouse/executions/{execution_id}"
                    }
                    }
                    }


## Manage a data warehouse [/gdc/datawarehouse/instances/{instance_id}]

+ Parameters
    + instance_id (string,required)...The data warehouse instance you want to manage.
    
### Get info about a DW [GET] 

+ Request

    + Headers
    
            Accept: application/json
        
    + Body
    
+ Response 200 (application/json)

    + Headers
    
            Content-type: application/json
    
    + Body
    
                {
                  "instance" : {
                    "title" : "Test",
                    "description" : "Storage",
                    "status" : "ENABLED",
                    "authorizationToken" : "{Token}",
                    "created" : "2014-05-05T08:27:33.000Z",
                    "updated" : "2014-05-05T08:27:34.000Z",
                    "createdBy" : "/gdc/account/profile/{profile_id}",
                    "updatedBy" : "/gdc/account/profile/{profile_id}",
                    "links" : {
                      "self" : "/gdc/datawarehouse/instances/{instance_id}",
                      "parent" : "/gdc/datawarehouse/instances",
                      "users" : "/gdc/datawarehouse/instances/{instance_id}/users",
                      "schemas" : "/gdc/datawarehouse/instances/{instance_id}/schemas",
                      "jdbc" : "/gdc/datawarehouse/instances/{instance_id}/jdbc"
                    }
                  }
                }


### Update a DW [PUT] 

+ Request

    + Headers

            Content-Type: application/json
            Accept: application/json

    + Body
    
            {
              "instance" : {
                "title" : "Test",
                "description" : "Storage",
                "status" : "ENABLED",
                "authorizationToken" : "{Token}",
                "created" : "2014-05-05T08:27:33.000Z",
                "updated" : "2014-05-05T08:27:34.000Z",
                "createdBy" : "/gdc/account/profile/{profile_id}",
                "updatedBy" : "/gdc/account/profile/{profile_id}",
                "links" : {
                  "self" : "/gdc/datawarehouse/instances/{instance_id}",
                  "parent" : "/gdc/datawarehouse/instances",
                  "users" : "/gdc/datawarehouse/instances/{instance_id}/users",
                  "jdbc" : "/gdc/datawarehouse/instances/{instance_id}/jdbc"
                }
              }
            }
        
+ Response 204


### Delete a DW [DELETE]


+ Request 
    + Headers

            Accept: application/json

+ Response 204



## Manage users for a DW instance [/gdc/datawarehouse/instances/{instance_id}/users]

+ parameters
    + instance_id (string,required) - the ID of the data warehouse instance.

### List all users in a data warehouse instance [GET]

**Response**
* `role` - The user's role.  
**Values:** admin, dataAdmin
    * `admin` - Can manage the instance and users within in it.
    * `dataAdmin` - Can run queries. Cannot manage users.
* `profile` - URI of the user's profile.
* `login` - User's GoodData login.

+ Request (application/json)
    
            Accept: application/json

+ Response 200
    
        + Headers
    
        Content-type: application/json
    
    + Body
    
            {
                "items": [
                    {
                        "user" : {
                            "role": "{role_id}"
                            "profile": "/gdc/account/profile/{profile_id}"
                            "links": {
                                "self": "/gdc/datawarehouse/instances/{instance_id}/users/{profile_id}"
                                "parent": "/gdc/datawarehouse/instances/{instance_id}/users"
                            }
                        }
                    }
                ]
            }

### Add users to a data warehouse instance [POST]

Poll to get execution status. 

* `user` - The user you want to add. You must specify `profile` or `login`.  
    * `role` (string, optional) - The role to assign to the user you add.  
    **Values:** admin, dataAdmin
      * `admin` - Manage the instance and users within in it.
      * `dataAdmin` - Can run queries. Cannot manage users.
    * `profile` (string, optional)- User profile URI of the user you want to add to the data warehouse.  Specify `profile` or `login`, but not both.
    * `login` (string, optional) - The login of the user you want to add. Specify `login` or `profile`, but not both.


+ Request (application/json)
      
     + Headers
          
            Accept: application/json

     + Body

            {
                "user" : {
                    "role": "{role_id}"
                    "profile": "/gdc/account/profile/{profile_id}"
                    "login": "{login}"
                }
            }
        
+ Response 202 (application/json)


     + Body

             {
                 "asyncTask" : {
                     "links" : {
                         "poll" : "/gdc/datawarehouse/executions/{execution_id}"
                     }
                 }
             }
             
             

## Manage a user in a DW instance [/gdc/datawarehouse/instances/{instance_id}/users/{user_id}]

+ parameters
    + instance_id (string,required) - The ID of the data warehouse instance where the user exists.
    + user_id (string,required) - The ID of the user you want to manage.

### Get info about a user in an DW instance [GET]

+ Request (application/json)
    
    + Headers
    
            Accept: application/json

+ Response 200
    
    
    + Body

            {
                    "user" : {
                        "role": "{role_id}"
                        "profile": "/gdc/account/profile/{profile_id}"
                        "links": {
                            "self": "/gdc/datawarehouse/instances/{instance_id}/users/{profile_id}"
                            "parent": "/gdc/datawarehouse/instances/{instance_id}/users"
                        }
                    }
                }

### Update a user's DW role [PUT]

+ Request (application/json)
      
     + Headers
          
            Accept: application/json

     + Body

            {
                "user" : {
                    "role": "{role_id}"
                    "profile": "/gdc/account/profile/{profile_id}"
                }
            }
        
+ Response 204 (application/json)

### Delete a user from an instance [DELETE]

Poll the returned URI to check the status of user deletion.

+ Request (application/json)

    + Headers

            Accept: application/json

+ Response 202 (application/json)

     + Body

             {
                 "asyncTask" : {
                     "links" : {
                         "poll" : "/gdc/datawarehouse/executions/{execution_id}"
                     }
                 }
             }
             
## Poll to get status of a DW execution [/gdc/datawarehouse/executions/{execution_id}]

+ parameters
    + execution_id (string, required)...The data warehouse exeuction that you want the status of. This URI is returned in the response body when you create or delete a user or DW instance.

### Poll to get execution status [GET]

If the execution is still in process this method returns Response 202. User creation returns the user's URI. Instance creation returns the instance URI. User deletion returns the URI for all users.

+ Request (application/json)
    
    + Headers
    
            Accept: application/json

+ Response 202 (application/json)


    + Body

            {
              "asyncTask" : {
                "links" : {
                  "poll" : "/gdc/datawarehouse/executions/{execution_id}"
                }
              }
            }


+ Response 201 (application/json)

     + Body

             {
                 "asyncTask" : {
                     "links" : {
                         "user" : "/gdc/datawarehouse/instance/{instance_id}/users/{profile_id}"
                     }
                 }
             }
+ Response 201 (application/json)

     + Body

             {
                 "asyncTask" : {
                     "links" : {
                         "instance" : "/gdc/datawarehouse/instance/{instance_id}"
                     }
                 }
             }

+ Response 201 (application/json)

     + Body

             {
                 "asyncTask" : {
                     "links" : {
                         "users" : "/gdc/datawarehouse/instance/{instance_id}/users"
                     }
                 }
             }


## List schemas per DW [/gdc/datawarehouse/instances/{instance_id}/schemas]

+ Parameters
    + instance_id (string,required)...The ID of the DW instance you want to list schemas for.

### List all schemas for a specific DW instance [GET]

**Response**
* `name` -  The name of the schema.
* `description` - The description of the schema. 
* `self` - The URI of the schema.
* `parent` - the URI of the parent page of the schema. You can see all schemas for a DW on this page.
* `instance` - the URI of the DW instance the schema belongs to.

+ Request

    + Headers

            Accept: application/json

+ Response 200 (application/json)

    + Body

            {
              "schemas" : {
                "items" : [ {
                  "schema" : {
                    "name" : "default",
                    "description" : "Default schema for new data warehouse instance",
                    "links" : {
                      "self" : "/gdc/datawarehouse/instances/{instance_id}/schemas/default",
                      "parent" : "/gdc/datawarehouse/instances/{instance_id}/schemas",
                      "instance" : "/gdc/datawarehouse/instances/{instance_id}"
                    }
                  }
                } ],
                "links" : {
                  "self" : "/gdc/datawarehouse/instances/{instance_id}/schemas",
                  "parent" : "/gdc/datawarehouse/instances/{instance_id}"
                }
              }
            }


## Get schema info [/gdc/datawarehouse/instances/{instance_id}/schemas/{schema_name}]

+ Parameters
    + instance_id (required,string)...The ID of the schema you want info about.
    + schema_name (required,string)...The name of the schema you want info about.

### Get info about a schema [GET]

**Response**
* `name` -  The name of the schema.
* `description` - The description of the schema. 
* `self` - The URI of the schema.
* `parent` - the URI of the parent page of the schema. You can see all schemas for an DW on this page.
* `instance` - the URI of the DW instance the schema belongs to.


+ Request

    + Headers

            Accept: application/json

+ Response 200 (application/json)

    + Body

            {
              "schema" : {
                "name" : "default",
                "description" : "Default schema for new DW instance",
                "links" : {
                  "self" : "/gdc/datawarehouse/instances/{instance_id}/schemas/default",
                  "parent" : "/gdc/datawarehouse/instances/{instance_id}/schemas",
                  "instance" : "/gdc/datawarehouse/instances/{instance_id}"
                }
              }
            }

## Get info about a DW [/gdc/datawarehouse]

### Get info about a data warehouse [GET]

+ Request  (application/json)
      
    + Headers
          
            Accept: application/json

+ Response 200 (application/json)
    

    + Body
        
            {
                "datawarehouse" {
                    "links": {
                        "self" : "/gdc/datawarehouse",
                        "parent" : "/gdc",
                        "dssInstances" : "/gdc/datawarehouse/instances"
                    }
                }
            }


## Get DW Connection Info [/gdc/datawarehouse/instances/{instance_id}/jdbc]

### Get JDBC connection info for a DW instance [GET]

+ Request (application/json)
    
    + Headers
        
            Accept: application/json
    

+ Response 200 (application/json)
    
    
    + Body
    
            {
                "jdbcInfo" : {
                    "host": "server.domain.com"
                    "port": 5443
                    "links": {
                        "self": "/gdc/datawarehouse/instances/{instance_id}/jdbc"
                        "parent": "/gdc/datawarehouse/instances/{instance_id}"
                    }
                }
            }

